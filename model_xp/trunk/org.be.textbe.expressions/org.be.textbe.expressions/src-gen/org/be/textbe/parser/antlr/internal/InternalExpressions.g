/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.be.textbe.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.be.textbe.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.be.textbe.services.ExpressionsGrammarAccess;

}

@parser::members {

 	private ExpressionsGrammarAccess grammarAccess;
 	
    public InternalExpressionsParser(TokenStream input, ExpressionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Node";	
   	}
   	
   	@Override
   	protected ExpressionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getBehaviorNodeParserRuleCall_0()); 
    }
    this_BehaviorNode_0=ruleBehaviorNode
    { 
        $current = $this_BehaviorNode_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getComponentInstantiationNodeParserRuleCall_1()); 
    }
    this_ComponentInstantiationNode_1=ruleComponentInstantiationNode
    { 
        $current = $this_ComponentInstantiationNode_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBehaviorNode
entryRuleBehaviorNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorNodeRule()); }
	 iv_ruleBehaviorNode=ruleBehaviorNode 
	 { $current=$iv_ruleBehaviorNode.current; } 
	 EOF 
;

// Rule BehaviorNode
ruleBehaviorNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorNodeAccess().getComponentIdentifierParserRuleCall_0_0()); 
	    }
		lv_component_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorNodeRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorNodeAccess().getBehaviorBehaviorParserRuleCall_1_0()); 
	    }
		lv_behavior_1_0=ruleBehavior		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorNodeRule());
	        }
       		set(
       			$current, 
       			"behavior",
        		lv_behavior_1_0, 
        		"Behavior");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBehavior
entryRuleBehavior returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorRule()); }
	 iv_ruleBehavior=ruleBehavior 
	 { $current=$iv_ruleBehavior.current; } 
	 EOF 
;

// Rule Behavior
ruleBehavior returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getStateRealisationParserRuleCall_0()); 
    }
    this_StateRealisation_0=ruleStateRealisation
    { 
        $current = $this_StateRealisation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getAttributeRealisationParserRuleCall_1()); 
    }
    this_AttributeRealisation_1=ruleAttributeRealisation
    { 
        $current = $this_AttributeRealisation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getEventParserRuleCall_2()); 
    }
    this_Event_2=ruleEvent
    { 
        $current = $this_Event_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getSelectionParserRuleCall_3()); 
    }
    this_Selection_3=ruleSelection
    { 
        $current = $this_Selection_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getGuardParserRuleCall_4()); 
    }
    this_Guard_4=ruleGuard
    { 
        $current = $this_Guard_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getInternalOutputEventParserRuleCall_5()); 
    }
    this_InternalOutputEvent_5=ruleInternalOutputEvent
    { 
        $current = $this_InternalOutputEvent_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getInternalInputEventParserRuleCall_6()); 
    }
    this_InternalInputEvent_6=ruleInternalInputEvent
    { 
        $current = $this_InternalInputEvent_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getExternalOutputEventParserRuleCall_7()); 
    }
    this_ExternalOutputEvent_7=ruleExternalOutputEvent
    { 
        $current = $this_ExternalOutputEvent_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBehaviorAccess().getExternalInputEventParserRuleCall_8()); 
    }
    this_ExternalInputEvent_8=ruleExternalInputEvent
    { 
        $current = $this_ExternalInputEvent_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStateRealisation
entryRuleStateRealisation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRealisationRule()); }
	 iv_ruleStateRealisation=ruleStateRealisation 
	 { $current=$iv_ruleStateRealisation.current; } 
	 EOF 
;

// Rule StateRealisation
ruleStateRealisation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateRealisationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateRealisationAccess().getStateBinaryExpressionParserRuleCall_1_0()); 
	    }
		lv_state_1_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRealisationRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_1_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateRealisationAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAttributeRealisation
entryRuleAttributeRealisation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRealisationRule()); }
	 iv_ruleAttributeRealisation=ruleAttributeRealisation 
	 { $current=$iv_ruleAttributeRealisation.current; } 
	 EOF 
;

// Rule AttributeRealisation
ruleAttributeRealisation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeRealisationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeRealisationAccess().getAttributeIdentifierParserRuleCall_1_0()); 
	    }
		lv_attribute_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRealisationRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeRealisationAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeRealisationAccess().getValueBinaryExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRealisationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAttributeRealisationAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSelection
entryRuleSelection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionRule()); }
	 iv_ruleSelection=ruleSelection 
	 { $current=$iv_ruleSelection.current; } 
	 EOF 
;

// Rule Selection
ruleSelection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='?' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelectionAccess().getQuestionMarkKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelectionAccess().getFunctionApplicationParserRuleCall_1()); 
    }
    this_FunctionApplication_1=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelectionAccess().getQuestionMarkKeyword_2());
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='??' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventAccess().getQuestionMarkQuestionMarkKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getEventAccess().getFunctionApplicationParserRuleCall_1()); 
    }
    this_FunctionApplication_1=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='??' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventAccess().getQuestionMarkQuestionMarkKeyword_2());
    }
)
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='???' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGuardAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardAccess().getStateBinaryExpressionParserRuleCall_1_0()); 
	    }
		lv_state_1_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_1_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='???' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGuardAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_2());
    }
)
;





// Entry rule entryRuleInternalOutputEvent
entryRuleInternalOutputEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInternalOutputEventRule()); }
	 iv_ruleInternalOutputEvent=ruleInternalOutputEvent 
	 { $current=$iv_ruleInternalOutputEvent.current; } 
	 EOF 
;

// Rule InternalOutputEvent
ruleInternalOutputEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInternalOutputEventAccess().getLessThanSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getInternalOutputEventAccess().getFunctionApplicationParserRuleCall_1()); 
    }
    this_FunctionApplication_1=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInternalOutputEventAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleInternalInputEvent
entryRuleInternalInputEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInternalInputEventRule()); }
	 iv_ruleInternalInputEvent=ruleInternalInputEvent 
	 { $current=$iv_ruleInternalInputEvent.current; } 
	 EOF 
;

// Rule InternalInputEvent
ruleInternalInputEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInternalInputEventAccess().getGreaterThanSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getInternalInputEventAccess().getFunctionApplicationParserRuleCall_1()); 
    }
    this_FunctionApplication_1=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInternalInputEventAccess().getLessThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleExternalOutputEvent
entryRuleExternalOutputEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalOutputEventRule()); }
	 iv_ruleExternalOutputEvent=ruleExternalOutputEvent 
	 { $current=$iv_ruleExternalOutputEvent.current; } 
	 EOF 
;

// Rule ExternalOutputEvent
ruleExternalOutputEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalOutputEventAccess().getLessThanSignLessThanSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExternalOutputEventAccess().getFunctionApplicationParserRuleCall_1()); 
    }
    this_FunctionApplication_1=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='>>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExternalOutputEventAccess().getGreaterThanSignGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleExternalInputEvent
entryRuleExternalInputEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalInputEventRule()); }
	 iv_ruleExternalInputEvent=ruleExternalInputEvent 
	 { $current=$iv_ruleExternalInputEvent.current; } 
	 EOF 
;

// Rule ExternalInputEvent
ruleExternalInputEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='>>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalInputEventAccess().getGreaterThanSignGreaterThanSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getExternalInputEventAccess().getFunctionApplicationParserRuleCall_1()); 
    }
    this_FunctionApplication_1=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='<<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExternalInputEventAccess().getLessThanSignLessThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleComponentInstantiationNode
entryRuleComponentInstantiationNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentInstantiationNodeRule()); }
	 iv_ruleComponentInstantiationNode=ruleComponentInstantiationNode 
	 { $current=$iv_ruleComponentInstantiationNode.current; } 
	 EOF 
;

// Rule ComponentInstantiationNode
ruleComponentInstantiationNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComponentInstantiationNodeAccess().getForAllParserRuleCall_0()); 
    }
    this_ForAll_0=ruleForAll
    { 
        $current = $this_ForAll_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComponentInstantiationNodeAccess().getForSomeParserRuleCall_1()); 
    }
    this_ForSome_1=ruleForSome
    { 
        $current = $this_ForSome_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComponentInstantiationNodeAccess().getAtLeastOneParserRuleCall_2()); 
    }
    this_AtLeastOne_2=ruleAtLeastOne
    { 
        $current = $this_AtLeastOne_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComponentInstantiationNodeAccess().getForOneArbitraryParserRuleCall_3()); 
    }
    this_ForOneArbitrary_3=ruleForOneArbitrary
    { 
        $current = $this_ForOneArbitrary_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForAll
entryRuleForAll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllRule()); }
	 iv_ruleForAll=ruleForAll 
	 { $current=$iv_ruleForAll.current; } 
	 EOF 
;

// Rule ForAll
ruleForAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='||' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAllAccess().getVerticalLineVerticalLineKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getForAllAccess().getComponentInstantiationParserRuleCall_1()); 
    }
    this_ComponentInstantiation_1=ruleComponentInstantiation
    { 
        $current = $this_ComponentInstantiation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForSome
entryRuleForSome returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForSomeRule()); }
	 iv_ruleForSome=ruleForSome 
	 { $current=$iv_ruleForSome.current; } 
	 EOF 
;

// Rule ForSome
ruleForSome returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForSomeAccess().getPercentSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getForSomeAccess().getComponentInstantiationParserRuleCall_1()); 
    }
    this_ComponentInstantiation_1=ruleComponentInstantiation
    { 
        $current = $this_ComponentInstantiation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtLeastOne
entryRuleAtLeastOne returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtLeastOneRule()); }
	 iv_ruleAtLeastOne=ruleAtLeastOne 
	 { $current=$iv_ruleAtLeastOne.current; } 
	 EOF 
;

// Rule AtLeastOne
ruleAtLeastOne returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='%+' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtLeastOneAccess().getPercentSignPlusSignKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtLeastOneAccess().getComponentInstantiationParserRuleCall_1()); 
    }
    this_ComponentInstantiation_1=ruleComponentInstantiation
    { 
        $current = $this_ComponentInstantiation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForOneArbitrary
entryRuleForOneArbitrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForOneArbitraryRule()); }
	 iv_ruleForOneArbitrary=ruleForOneArbitrary 
	 { $current=$iv_ruleForOneArbitrary.current; } 
	 EOF 
;

// Rule ForOneArbitrary
ruleForOneArbitrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[]' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForOneArbitraryAccess().getLeftSquareBracketRightSquareBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getForOneArbitraryAccess().getComponentInstantiationParserRuleCall_1()); 
    }
    this_ComponentInstantiation_1=ruleComponentInstantiation
    { 
        $current = $this_ComponentInstantiation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComponentInstantiation
entryRuleComponentInstantiation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentInstantiationRule()); }
	 iv_ruleComponentInstantiation=ruleComponentInstantiation 
	 { $current=$iv_ruleComponentInstantiation.current; } 
	 EOF 
;

// Rule ComponentInstantiation
ruleComponentInstantiation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComponentInstantiationAccess().getComponentIdentifierParserRuleCall_0_0()); 
	    }
		lv_component_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentInstantiationRule());
	        }
       		set(
       			$current, 
       			"component",
        		lv_component_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentInstantiationAccess().getNumberSignKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getComponentInstantiationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentInstantiationAccess().getComponentSetBinaryExpressionParserRuleCall_3_0()); 
	    }
		lv_componentSet_3_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentInstantiationRule());
	        }
       		set(
       			$current, 
       			"componentSet",
        		lv_componentSet_3_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBinaryRelation
entryRuleBinaryRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryRelationRule()); }
	 iv_ruleBinaryRelation=ruleBinaryRelation 
	 { $current=$iv_ruleBinaryRelation.current; } 
	 EOF 
;

// Rule BinaryRelation
ruleBinaryRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='NOT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBinaryRelationAccess().getNOTKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryRelationAccess().getLeftBinaryExpressionParserRuleCall_1_0()); 
	    }
		lv_left_1_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRelationRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryRelationAccess().getOperatorBinarySymbolEnumRuleCall_2_0_0()); 
	    }
		lv_operator_2_0=rulebinarySymbol		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRelationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"binarySymbol");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryRelationAccess().getRightBinaryExpressionParserRuleCall_2_1_0()); 
	    }
		lv_right_3_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRelationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryExpressionRule()); }
	 iv_ruleBinaryExpression=ruleBinaryExpression 
	 { $current=$iv_ruleBinaryExpression.current; } 
	 EOF 
;

// Rule BinaryExpression
ruleBinaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExpressionAccess().getLeftExpressionValueParserRuleCall_0_0()); 
	    }
		lv_leftExpression_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpression",
        		lv_leftExpression_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExpressionAccess().getOperatorBinaryOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleBinaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"BinaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryExpressionAccess().getRightExpressionBinaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpression_2_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_2_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getReferenceParserRuleCall_0()); 
    }
    this_Reference_0=ruleReference
    { 
        $current = $this_Reference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNumberParserRuleCall_1()); 
    }
    this_Number_1=ruleNumber
    { 
        $current = $this_Number_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getFunctionApplicationParserRuleCall_2()); 
    }
    this_FunctionApplication_2=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBracketedExpressionParserRuleCall_3()); 
    }
    this_BracketedExpression_3=ruleBracketedExpression
    { 
        $current = $this_BracketedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getCardinalityParserRuleCall_4()); 
    }
    this_Cardinality_4=ruleCardinality
    { 
        $current = $this_Cardinality_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getEnumeratedSetParserRuleCall_5()); 
    }
    this_EnumeratedSet_5=ruleEnumeratedSet
    { 
        $current = $this_EnumeratedSet_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getFuzzyExpParserRuleCall_6()); 
    }
    this_FuzzyExp_6=ruleFuzzyExp
    { 
        $current = $this_FuzzyExp_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getObjectIdentifierParserRuleCall_0()); 
	    }
		lv_object_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		set(
       			$current, 
       			"object",
        		lv_object_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdentifierAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current; } 
	 EOF 
;

// Rule Number
ruleNumber returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFunctionApplication
entryRuleFunctionApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionApplicationRule()); }
	 iv_ruleFunctionApplication=ruleFunctionApplication 
	 { $current=$iv_ruleFunctionApplication.current; } 
	 EOF 
;

// Rule FunctionApplication
ruleFunctionApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionApplicationAccess().getFunctionNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_functionName_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionApplicationRule());
	        }
       		set(
       			$current, 
       			"functionName",
        		lv_functionName_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionApplicationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionApplicationAccess().getParameterBinaryExpressionParserRuleCall_2_0()); 
	    }
		lv_parameter_2_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionApplicationRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionApplicationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleBracketedExpression
entryRuleBracketedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketedExpressionRule()); }
	 iv_ruleBracketedExpression=ruleBracketedExpression 
	 { $current=$iv_ruleBracketedExpression.current; } 
	 EOF 
;

// Rule BracketedExpression
ruleBracketedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBracketedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBracketedExpressionAccess().getExpressionBinaryRelationParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleBinaryRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBracketedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"BinaryRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBracketedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCardinalityRule()); }
	 iv_ruleCardinality=ruleCardinality 
	 { $current=$iv_ruleCardinality.current; } 
	 EOF 
;

// Rule Cardinality
ruleCardinality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='|' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCardinalityAccess().getVerticalLineKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityAccess().getExpressionBinaryExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCardinalityAccess().getVerticalLineKeyword_2());
    }
)
;





// Entry rule entryRuleEnumeratedSet
entryRuleEnumeratedSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumeratedSetRule()); }
	 iv_ruleEnumeratedSet=ruleEnumeratedSet 
	 { $current=$iv_ruleEnumeratedSet.current; } 
	 EOF 
;

// Rule EnumeratedSet
ruleEnumeratedSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumeratedSetAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumeratedSetAccess().getExpressionsBinaryExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumeratedSetRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumeratedSetAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFuzzyExp
entryRuleFuzzyExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFuzzyExpRule()); }
	 iv_ruleFuzzyExp=ruleFuzzyExp 
	 { $current=$iv_ruleFuzzyExp.current; } 
	 EOF 
;

// Rule FuzzyExp
ruleFuzzyExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFuzzyExpAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFuzzyExpAccess().getExpressionBinaryExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleBinaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFuzzyExpRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"BinaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFuzzyExpAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Rule binarySymbol
rulebinarySymbol returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getLESS_THANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinarySymbolAccess().getLESS_THANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getGREATER_THANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinarySymbolAccess().getGREATER_THANEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='=' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getEQUAL_TOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinarySymbolAccess().getEQUAL_TOEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='=<' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBinarySymbolAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBinarySymbolAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5=':' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getCOLONEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getBinarySymbolAccess().getCOLONEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='<:' 
	{
        $current = grammarAccess.getBinarySymbolAccess().getSUBSET_EXPEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getBinarySymbolAccess().getSUBSET_EXPEnumLiteralDeclaration_6()); 
    }
));



// Rule BinaryOperator
ruleBinaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOperatorAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='><' 
	{
        $current = grammarAccess.getBinaryOperatorAccess().getINTERSECTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryOperatorAccess().getINTERSECTEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


