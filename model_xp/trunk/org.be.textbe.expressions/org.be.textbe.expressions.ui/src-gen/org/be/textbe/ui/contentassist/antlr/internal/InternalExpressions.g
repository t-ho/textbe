/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.be.textbe.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.be.textbe.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.be.textbe.services.ExpressionsGrammarAccess;

}

@parser::members {
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getAlternatives()); }
(rule__Node__Alternatives)
{ after(grammarAccess.getNodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBehaviorNode
entryRuleBehaviorNode 
:
{ before(grammarAccess.getBehaviorNodeRule()); }
	 ruleBehaviorNode
{ after(grammarAccess.getBehaviorNodeRule()); } 
	 EOF 
;

// Rule BehaviorNode
ruleBehaviorNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBehaviorNodeAccess().getGroup()); }
(rule__BehaviorNode__Group__0)
{ after(grammarAccess.getBehaviorNodeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBehavior
entryRuleBehavior 
:
{ before(grammarAccess.getBehaviorRule()); }
	 ruleBehavior
{ after(grammarAccess.getBehaviorRule()); } 
	 EOF 
;

// Rule Behavior
ruleBehavior
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBehaviorAccess().getAlternatives()); }
(rule__Behavior__Alternatives)
{ after(grammarAccess.getBehaviorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateRealisation
entryRuleStateRealisation 
:
{ before(grammarAccess.getStateRealisationRule()); }
	 ruleStateRealisation
{ after(grammarAccess.getStateRealisationRule()); } 
	 EOF 
;

// Rule StateRealisation
ruleStateRealisation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateRealisationAccess().getGroup()); }
(rule__StateRealisation__Group__0)
{ after(grammarAccess.getStateRealisationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeRealisation
entryRuleAttributeRealisation 
:
{ before(grammarAccess.getAttributeRealisationRule()); }
	 ruleAttributeRealisation
{ after(grammarAccess.getAttributeRealisationRule()); } 
	 EOF 
;

// Rule AttributeRealisation
ruleAttributeRealisation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeRealisationAccess().getGroup()); }
(rule__AttributeRealisation__Group__0)
{ after(grammarAccess.getAttributeRealisationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelection
entryRuleSelection 
:
{ before(grammarAccess.getSelectionRule()); }
	 ruleSelection
{ after(grammarAccess.getSelectionRule()); } 
	 EOF 
;

// Rule Selection
ruleSelection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectionAccess().getGroup()); }
(rule__Selection__Group__0)
{ after(grammarAccess.getSelectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGuard
entryRuleGuard 
:
{ before(grammarAccess.getGuardRule()); }
	 ruleGuard
{ after(grammarAccess.getGuardRule()); } 
	 EOF 
;

// Rule Guard
ruleGuard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGuardAccess().getGroup()); }
(rule__Guard__Group__0)
{ after(grammarAccess.getGuardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInternalOutputEvent
entryRuleInternalOutputEvent 
:
{ before(grammarAccess.getInternalOutputEventRule()); }
	 ruleInternalOutputEvent
{ after(grammarAccess.getInternalOutputEventRule()); } 
	 EOF 
;

// Rule InternalOutputEvent
ruleInternalOutputEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInternalOutputEventAccess().getGroup()); }
(rule__InternalOutputEvent__Group__0)
{ after(grammarAccess.getInternalOutputEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInternalInputEvent
entryRuleInternalInputEvent 
:
{ before(grammarAccess.getInternalInputEventRule()); }
	 ruleInternalInputEvent
{ after(grammarAccess.getInternalInputEventRule()); } 
	 EOF 
;

// Rule InternalInputEvent
ruleInternalInputEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInternalInputEventAccess().getGroup()); }
(rule__InternalInputEvent__Group__0)
{ after(grammarAccess.getInternalInputEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalOutputEvent
entryRuleExternalOutputEvent 
:
{ before(grammarAccess.getExternalOutputEventRule()); }
	 ruleExternalOutputEvent
{ after(grammarAccess.getExternalOutputEventRule()); } 
	 EOF 
;

// Rule ExternalOutputEvent
ruleExternalOutputEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExternalOutputEventAccess().getGroup()); }
(rule__ExternalOutputEvent__Group__0)
{ after(grammarAccess.getExternalOutputEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExternalInputEvent
entryRuleExternalInputEvent 
:
{ before(grammarAccess.getExternalInputEventRule()); }
	 ruleExternalInputEvent
{ after(grammarAccess.getExternalInputEventRule()); } 
	 EOF 
;

// Rule ExternalInputEvent
ruleExternalInputEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExternalInputEventAccess().getGroup()); }
(rule__ExternalInputEvent__Group__0)
{ after(grammarAccess.getExternalInputEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentInstantiationNode
entryRuleComponentInstantiationNode 
:
{ before(grammarAccess.getComponentInstantiationNodeRule()); }
	 ruleComponentInstantiationNode
{ after(grammarAccess.getComponentInstantiationNodeRule()); } 
	 EOF 
;

// Rule ComponentInstantiationNode
ruleComponentInstantiationNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentInstantiationNodeAccess().getAlternatives()); }
(rule__ComponentInstantiationNode__Alternatives)
{ after(grammarAccess.getComponentInstantiationNodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForAll
entryRuleForAll 
:
{ before(grammarAccess.getForAllRule()); }
	 ruleForAll
{ after(grammarAccess.getForAllRule()); } 
	 EOF 
;

// Rule ForAll
ruleForAll
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForAllAccess().getGroup()); }
(rule__ForAll__Group__0)
{ after(grammarAccess.getForAllAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForSome
entryRuleForSome 
:
{ before(grammarAccess.getForSomeRule()); }
	 ruleForSome
{ after(grammarAccess.getForSomeRule()); } 
	 EOF 
;

// Rule ForSome
ruleForSome
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForSomeAccess().getGroup()); }
(rule__ForSome__Group__0)
{ after(grammarAccess.getForSomeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtLeastOne
entryRuleAtLeastOne 
:
{ before(grammarAccess.getAtLeastOneRule()); }
	 ruleAtLeastOne
{ after(grammarAccess.getAtLeastOneRule()); } 
	 EOF 
;

// Rule AtLeastOne
ruleAtLeastOne
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtLeastOneAccess().getGroup()); }
(rule__AtLeastOne__Group__0)
{ after(grammarAccess.getAtLeastOneAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForOneArbitrary
entryRuleForOneArbitrary 
:
{ before(grammarAccess.getForOneArbitraryRule()); }
	 ruleForOneArbitrary
{ after(grammarAccess.getForOneArbitraryRule()); } 
	 EOF 
;

// Rule ForOneArbitrary
ruleForOneArbitrary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForOneArbitraryAccess().getGroup()); }
(rule__ForOneArbitrary__Group__0)
{ after(grammarAccess.getForOneArbitraryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentInstantiation
entryRuleComponentInstantiation 
:
{ before(grammarAccess.getComponentInstantiationRule()); }
	 ruleComponentInstantiation
{ after(grammarAccess.getComponentInstantiationRule()); } 
	 EOF 
;

// Rule ComponentInstantiation
ruleComponentInstantiation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentInstantiationAccess().getGroup()); }
(rule__ComponentInstantiation__Group__0)
{ after(grammarAccess.getComponentInstantiationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryRelation
entryRuleBinaryRelation 
:
{ before(grammarAccess.getBinaryRelationRule()); }
	 ruleBinaryRelation
{ after(grammarAccess.getBinaryRelationRule()); } 
	 EOF 
;

// Rule BinaryRelation
ruleBinaryRelation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryRelationAccess().getGroup()); }
(rule__BinaryRelation__Group__0)
{ after(grammarAccess.getBinaryRelationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression 
:
{ before(grammarAccess.getBinaryExpressionRule()); }
	 ruleBinaryExpression
{ after(grammarAccess.getBinaryExpressionRule()); } 
	 EOF 
;

// Rule BinaryExpression
ruleBinaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryExpressionAccess().getGroup()); }
(rule__BinaryExpression__Group__0)
{ after(grammarAccess.getBinaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getObjectAssignment()); }
(rule__Reference__ObjectAssignment)
{ after(grammarAccess.getReferenceAccess().getObjectAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getGroup()); }
(rule__Identifier__Group__0)
{ after(grammarAccess.getIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getValueAssignment()); }
(rule__Number__ValueAssignment)
{ after(grammarAccess.getNumberAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionApplication
entryRuleFunctionApplication 
:
{ before(grammarAccess.getFunctionApplicationRule()); }
	 ruleFunctionApplication
{ after(grammarAccess.getFunctionApplicationRule()); } 
	 EOF 
;

// Rule FunctionApplication
ruleFunctionApplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionApplicationAccess().getGroup()); }
(rule__FunctionApplication__Group__0)
{ after(grammarAccess.getFunctionApplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBracketedExpression
entryRuleBracketedExpression 
:
{ before(grammarAccess.getBracketedExpressionRule()); }
	 ruleBracketedExpression
{ after(grammarAccess.getBracketedExpressionRule()); } 
	 EOF 
;

// Rule BracketedExpression
ruleBracketedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBracketedExpressionAccess().getGroup()); }
(rule__BracketedExpression__Group__0)
{ after(grammarAccess.getBracketedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCardinality
entryRuleCardinality 
:
{ before(grammarAccess.getCardinalityRule()); }
	 ruleCardinality
{ after(grammarAccess.getCardinalityRule()); } 
	 EOF 
;

// Rule Cardinality
ruleCardinality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCardinalityAccess().getGroup()); }
(rule__Cardinality__Group__0)
{ after(grammarAccess.getCardinalityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeratedSet
entryRuleEnumeratedSet 
:
{ before(grammarAccess.getEnumeratedSetRule()); }
	 ruleEnumeratedSet
{ after(grammarAccess.getEnumeratedSetRule()); } 
	 EOF 
;

// Rule EnumeratedSet
ruleEnumeratedSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumeratedSetAccess().getGroup()); }
(rule__EnumeratedSet__Group__0)
{ after(grammarAccess.getEnumeratedSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFuzzyExp
entryRuleFuzzyExp 
:
{ before(grammarAccess.getFuzzyExpRule()); }
	 ruleFuzzyExp
{ after(grammarAccess.getFuzzyExpRule()); } 
	 EOF 
;

// Rule FuzzyExp
ruleFuzzyExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFuzzyExpAccess().getGroup()); }
(rule__FuzzyExp__Group__0)
{ after(grammarAccess.getFuzzyExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule binarySymbol
rulebinarySymbol
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinarySymbolAccess().getAlternatives()); }
(rule__BinarySymbol__Alternatives)
{ after(grammarAccess.getBinarySymbolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BinaryOperator
ruleBinaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOperatorAccess().getAlternatives()); }
(rule__BinaryOperator__Alternatives)
{ after(grammarAccess.getBinaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Node__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getBehaviorNodeParserRuleCall_0()); }
	ruleBehaviorNode
{ after(grammarAccess.getNodeAccess().getBehaviorNodeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getComponentInstantiationNodeParserRuleCall_1()); }
	ruleComponentInstantiationNode
{ after(grammarAccess.getNodeAccess().getComponentInstantiationNodeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getStateRealisationParserRuleCall_0()); }
	ruleStateRealisation
{ after(grammarAccess.getBehaviorAccess().getStateRealisationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getAttributeRealisationParserRuleCall_1()); }
	ruleAttributeRealisation
{ after(grammarAccess.getBehaviorAccess().getAttributeRealisationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getEventParserRuleCall_2()); }
	ruleEvent
{ after(grammarAccess.getBehaviorAccess().getEventParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getSelectionParserRuleCall_3()); }
	ruleSelection
{ after(grammarAccess.getBehaviorAccess().getSelectionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getGuardParserRuleCall_4()); }
	ruleGuard
{ after(grammarAccess.getBehaviorAccess().getGuardParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getInternalOutputEventParserRuleCall_5()); }
	ruleInternalOutputEvent
{ after(grammarAccess.getBehaviorAccess().getInternalOutputEventParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getInternalInputEventParserRuleCall_6()); }
	ruleInternalInputEvent
{ after(grammarAccess.getBehaviorAccess().getInternalInputEventParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getExternalOutputEventParserRuleCall_7()); }
	ruleExternalOutputEvent
{ after(grammarAccess.getBehaviorAccess().getExternalOutputEventParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getBehaviorAccess().getExternalInputEventParserRuleCall_8()); }
	ruleExternalInputEvent
{ after(grammarAccess.getBehaviorAccess().getExternalInputEventParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiationNode__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationNodeAccess().getForAllParserRuleCall_0()); }
	ruleForAll
{ after(grammarAccess.getComponentInstantiationNodeAccess().getForAllParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComponentInstantiationNodeAccess().getForSomeParserRuleCall_1()); }
	ruleForSome
{ after(grammarAccess.getComponentInstantiationNodeAccess().getForSomeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComponentInstantiationNodeAccess().getAtLeastOneParserRuleCall_2()); }
	ruleAtLeastOne
{ after(grammarAccess.getComponentInstantiationNodeAccess().getAtLeastOneParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getComponentInstantiationNodeAccess().getForOneArbitraryParserRuleCall_3()); }
	ruleForOneArbitrary
{ after(grammarAccess.getComponentInstantiationNodeAccess().getForOneArbitraryParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getReferenceParserRuleCall_0()); }
	ruleReference
{ after(grammarAccess.getValueAccess().getReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNumberParserRuleCall_1()); }
	ruleNumber
{ after(grammarAccess.getValueAccess().getNumberParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getFunctionApplicationParserRuleCall_2()); }
	ruleFunctionApplication
{ after(grammarAccess.getValueAccess().getFunctionApplicationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBracketedExpressionParserRuleCall_3()); }
	ruleBracketedExpression
{ after(grammarAccess.getValueAccess().getBracketedExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getCardinalityParserRuleCall_4()); }
	ruleCardinality
{ after(grammarAccess.getValueAccess().getCardinalityParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getEnumeratedSetParserRuleCall_5()); }
	ruleEnumeratedSet
{ after(grammarAccess.getValueAccess().getEnumeratedSetParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getValueAccess().getFuzzyExpParserRuleCall_6()); }
	ruleFuzzyExp
{ after(grammarAccess.getValueAccess().getFuzzyExpParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinarySymbol__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinarySymbolAccess().getLESS_THANEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getBinarySymbolAccess().getLESS_THANEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinarySymbolAccess().getGREATER_THANEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getBinarySymbolAccess().getGREATER_THANEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBinarySymbolAccess().getEQUAL_TOEnumLiteralDeclaration_2()); }
(	'=' 
)
{ after(grammarAccess.getBinarySymbolAccess().getEQUAL_TOEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBinarySymbolAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_3()); }
(	'=<' 
)
{ after(grammarAccess.getBinarySymbolAccess().getLESS_THAN_OR_EQUALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBinarySymbolAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getBinarySymbolAccess().getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getBinarySymbolAccess().getCOLONEnumLiteralDeclaration_5()); }
(	':' 
)
{ after(grammarAccess.getBinarySymbolAccess().getCOLONEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getBinarySymbolAccess().getSUBSET_EXPEnumLiteralDeclaration_6()); }
(	'<:' 
)
{ after(grammarAccess.getBinarySymbolAccess().getSUBSET_EXPEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorAccess().getINTERSECTEnumLiteralDeclaration_2()); }
(	'><' 
)
{ after(grammarAccess.getBinaryOperatorAccess().getINTERSECTEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BehaviorNode__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorNode__Group__0__Impl
	rule__BehaviorNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorNode__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorNodeAccess().getComponentAssignment_0()); }
(rule__BehaviorNode__ComponentAssignment_0)
{ after(grammarAccess.getBehaviorNodeAccess().getComponentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BehaviorNode__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorNode__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorNodeAccess().getBehaviorAssignment_1()); }
(rule__BehaviorNode__BehaviorAssignment_1)
{ after(grammarAccess.getBehaviorNodeAccess().getBehaviorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateRealisation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRealisation__Group__0__Impl
	rule__StateRealisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRealisation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRealisationAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getStateRealisationAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateRealisation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRealisation__Group__1__Impl
	rule__StateRealisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRealisation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRealisationAccess().getStateAssignment_1()); }
(rule__StateRealisation__StateAssignment_1)
{ after(grammarAccess.getStateRealisationAccess().getStateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateRealisation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateRealisation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateRealisation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRealisationAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getStateRealisationAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AttributeRealisation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeRealisation__Group__0__Impl
	rule__AttributeRealisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getAttributeRealisationAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeRealisation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeRealisation__Group__1__Impl
	rule__AttributeRealisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getAttributeAssignment_1()); }
(rule__AttributeRealisation__AttributeAssignment_1)
{ after(grammarAccess.getAttributeRealisationAccess().getAttributeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeRealisation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeRealisation__Group__2__Impl
	rule__AttributeRealisation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getAttributeRealisationAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeRealisation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeRealisation__Group__3__Impl
	rule__AttributeRealisation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getValueAssignment_3()); }
(rule__AttributeRealisation__ValueAssignment_3)
{ after(grammarAccess.getAttributeRealisationAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeRealisation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeRealisation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getAttributeRealisationAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Selection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__0__Impl
	rule__Selection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getSelectionAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__1__Impl
	rule__Selection__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getFunctionApplicationParserRuleCall_1()); }
	ruleFunctionApplication
{ after(grammarAccess.getSelectionAccess().getFunctionApplicationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionAccess().getQuestionMarkKeyword_2()); }

	'?' 

{ after(grammarAccess.getSelectionAccess().getQuestionMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getQuestionMarkQuestionMarkKeyword_0()); }

	'??' 

{ after(grammarAccess.getEventAccess().getQuestionMarkQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getFunctionApplicationParserRuleCall_1()); }
	ruleFunctionApplication
{ after(grammarAccess.getEventAccess().getFunctionApplicationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getQuestionMarkQuestionMarkKeyword_2()); }

	'??' 

{ after(grammarAccess.getEventAccess().getQuestionMarkQuestionMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Guard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Guard__Group__0__Impl
	rule__Guard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Guard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_0()); }

	'???' 

{ after(grammarAccess.getGuardAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Guard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Guard__Group__1__Impl
	rule__Guard__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Guard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardAccess().getStateAssignment_1()); }
(rule__Guard__StateAssignment_1)
{ after(grammarAccess.getGuardAccess().getStateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Guard__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Guard__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Guard__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_2()); }

	'???' 

{ after(grammarAccess.getGuardAccess().getQuestionMarkQuestionMarkQuestionMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InternalOutputEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalOutputEvent__Group__0__Impl
	rule__InternalOutputEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalOutputEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalOutputEventAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getInternalOutputEventAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalOutputEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalOutputEvent__Group__1__Impl
	rule__InternalOutputEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalOutputEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalOutputEventAccess().getFunctionApplicationParserRuleCall_1()); }
	ruleFunctionApplication
{ after(grammarAccess.getInternalOutputEventAccess().getFunctionApplicationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalOutputEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalOutputEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalOutputEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalOutputEventAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getInternalOutputEventAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InternalInputEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalInputEvent__Group__0__Impl
	rule__InternalInputEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalInputEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalInputEventAccess().getGreaterThanSignKeyword_0()); }

	'>' 

{ after(grammarAccess.getInternalInputEventAccess().getGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalInputEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalInputEvent__Group__1__Impl
	rule__InternalInputEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalInputEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalInputEventAccess().getFunctionApplicationParserRuleCall_1()); }
	ruleFunctionApplication
{ after(grammarAccess.getInternalInputEventAccess().getFunctionApplicationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InternalInputEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InternalInputEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InternalInputEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInternalInputEventAccess().getLessThanSignKeyword_2()); }

	'<' 

{ after(grammarAccess.getInternalInputEventAccess().getLessThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExternalOutputEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalOutputEvent__Group__0__Impl
	rule__ExternalOutputEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalOutputEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalOutputEventAccess().getLessThanSignLessThanSignKeyword_0()); }

	'<<' 

{ after(grammarAccess.getExternalOutputEventAccess().getLessThanSignLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalOutputEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalOutputEvent__Group__1__Impl
	rule__ExternalOutputEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalOutputEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalOutputEventAccess().getFunctionApplicationParserRuleCall_1()); }
	ruleFunctionApplication
{ after(grammarAccess.getExternalOutputEventAccess().getFunctionApplicationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalOutputEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalOutputEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalOutputEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalOutputEventAccess().getGreaterThanSignGreaterThanSignKeyword_2()); }

	'>>' 

{ after(grammarAccess.getExternalOutputEventAccess().getGreaterThanSignGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExternalInputEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalInputEvent__Group__0__Impl
	rule__ExternalInputEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalInputEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalInputEventAccess().getGreaterThanSignGreaterThanSignKeyword_0()); }

	'>>' 

{ after(grammarAccess.getExternalInputEventAccess().getGreaterThanSignGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalInputEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalInputEvent__Group__1__Impl
	rule__ExternalInputEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalInputEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalInputEventAccess().getFunctionApplicationParserRuleCall_1()); }
	ruleFunctionApplication
{ after(grammarAccess.getExternalInputEventAccess().getFunctionApplicationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalInputEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExternalInputEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalInputEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExternalInputEventAccess().getLessThanSignLessThanSignKeyword_2()); }

	'<<' 

{ after(grammarAccess.getExternalInputEventAccess().getLessThanSignLessThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ForAll__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__0__Impl
	rule__ForAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getVerticalLineVerticalLineKeyword_0()); }

	'||' 

{ after(grammarAccess.getForAllAccess().getVerticalLineVerticalLineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getComponentInstantiationParserRuleCall_1()); }
	ruleComponentInstantiation
{ after(grammarAccess.getForAllAccess().getComponentInstantiationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForSome__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForSome__Group__0__Impl
	rule__ForSome__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForSome__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForSomeAccess().getPercentSignKeyword_0()); }

	'%' 

{ after(grammarAccess.getForSomeAccess().getPercentSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForSome__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForSome__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForSome__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForSomeAccess().getComponentInstantiationParserRuleCall_1()); }
	ruleComponentInstantiation
{ after(grammarAccess.getForSomeAccess().getComponentInstantiationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AtLeastOne__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtLeastOne__Group__0__Impl
	rule__AtLeastOne__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtLeastOne__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLeastOneAccess().getPercentSignPlusSignKeyword_0()); }

	'%+' 

{ after(grammarAccess.getAtLeastOneAccess().getPercentSignPlusSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AtLeastOne__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AtLeastOne__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtLeastOne__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtLeastOneAccess().getComponentInstantiationParserRuleCall_1()); }
	ruleComponentInstantiation
{ after(grammarAccess.getAtLeastOneAccess().getComponentInstantiationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForOneArbitrary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForOneArbitrary__Group__0__Impl
	rule__ForOneArbitrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForOneArbitrary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForOneArbitraryAccess().getLeftSquareBracketRightSquareBracketKeyword_0()); }

	'[]' 

{ after(grammarAccess.getForOneArbitraryAccess().getLeftSquareBracketRightSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForOneArbitrary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForOneArbitrary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForOneArbitrary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForOneArbitraryAccess().getComponentInstantiationParserRuleCall_1()); }
	ruleComponentInstantiation
{ after(grammarAccess.getForOneArbitraryAccess().getComponentInstantiationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentInstantiation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiation__Group__0__Impl
	rule__ComponentInstantiation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationAccess().getComponentAssignment_0()); }
(rule__ComponentInstantiation__ComponentAssignment_0)
{ after(grammarAccess.getComponentInstantiationAccess().getComponentAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiation__Group__1__Impl
	rule__ComponentInstantiation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationAccess().getNumberSignKeyword_1()); }

	'#' 

{ after(grammarAccess.getComponentInstantiationAccess().getNumberSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiation__Group__2__Impl
	rule__ComponentInstantiation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getComponentInstantiationAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentInstantiation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentInstantiation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationAccess().getComponentSetAssignment_3()); }
(rule__ComponentInstantiation__ComponentSetAssignment_3)
{ after(grammarAccess.getComponentInstantiationAccess().getComponentSetAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BinaryRelation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryRelation__Group__0__Impl
	rule__BinaryRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getNOTKeyword_0()); }
(
	'NOT' 
)?
{ after(grammarAccess.getBinaryRelationAccess().getNOTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryRelation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryRelation__Group__1__Impl
	rule__BinaryRelation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getLeftAssignment_1()); }
(rule__BinaryRelation__LeftAssignment_1)
{ after(grammarAccess.getBinaryRelationAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryRelation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryRelation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getGroup_2()); }
(rule__BinaryRelation__Group_2__0)?
{ after(grammarAccess.getBinaryRelationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BinaryRelation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryRelation__Group_2__0__Impl
	rule__BinaryRelation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getOperatorAssignment_2_0()); }
(rule__BinaryRelation__OperatorAssignment_2_0)
{ after(grammarAccess.getBinaryRelationAccess().getOperatorAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryRelation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryRelation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getRightAssignment_2_1()); }
(rule__BinaryRelation__RightAssignment_2_1)
{ after(grammarAccess.getBinaryRelationAccess().getRightAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryExpression__Group__0__Impl
	rule__BinaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getLeftExpressionAssignment_0()); }
(rule__BinaryExpression__LeftExpressionAssignment_0)
{ after(grammarAccess.getBinaryExpressionAccess().getLeftExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getGroup_1()); }
(rule__BinaryExpression__Group_1__0)?
{ after(grammarAccess.getBinaryExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryExpression__Group_1__0__Impl
	rule__BinaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_1_0()); }
(rule__BinaryExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getBinaryExpressionAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getRightExpressionAssignment_1_1()); }
(rule__BinaryExpression__RightExpressionAssignment_1_1)
{ after(grammarAccess.getBinaryExpressionAccess().getRightExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Identifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier__Group__0__Impl
	rule__Identifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getGroup_1()); }
(rule__Identifier__Group_1__0)*
{ after(grammarAccess.getIdentifierAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Identifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier__Group_1__0__Impl
	rule__Identifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getIdentifierAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Identifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionApplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionApplication__Group__0__Impl
	rule__FunctionApplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionApplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionApplicationAccess().getFunctionNameAssignment_0()); }
(rule__FunctionApplication__FunctionNameAssignment_0)
{ after(grammarAccess.getFunctionApplicationAccess().getFunctionNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionApplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionApplication__Group__1__Impl
	rule__FunctionApplication__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionApplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionApplicationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionApplicationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionApplication__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionApplication__Group__2__Impl
	rule__FunctionApplication__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionApplication__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionApplicationAccess().getParameterAssignment_2()); }
(rule__FunctionApplication__ParameterAssignment_2)
{ after(grammarAccess.getFunctionApplicationAccess().getParameterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionApplication__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionApplication__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionApplication__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionApplicationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionApplicationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BracketedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketedExpression__Group__0__Impl
	rule__BracketedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getBracketedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracketedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketedExpression__Group__1__Impl
	rule__BracketedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExpressionAccess().getExpressionAssignment_1()); }
(rule__BracketedExpression__ExpressionAssignment_1)
{ after(grammarAccess.getBracketedExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracketedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracketedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getBracketedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Cardinality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group__0__Impl
	rule__Cardinality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getVerticalLineKeyword_0()); }

	'|' 

{ after(grammarAccess.getCardinalityAccess().getVerticalLineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group__1__Impl
	rule__Cardinality__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionAssignment_1()); }
(rule__Cardinality__ExpressionAssignment_1)
{ after(grammarAccess.getCardinalityAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cardinality__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cardinality__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getCardinalityAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumeratedSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratedSet__Group__0__Impl
	rule__EnumeratedSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratedSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratedSetAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getEnumeratedSetAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratedSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratedSet__Group__1__Impl
	rule__EnumeratedSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratedSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratedSetAccess().getExpressionsAssignment_1()); }
(rule__EnumeratedSet__ExpressionsAssignment_1)
{ after(grammarAccess.getEnumeratedSetAccess().getExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratedSet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratedSet__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratedSet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratedSetAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getEnumeratedSetAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FuzzyExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuzzyExp__Group__0__Impl
	rule__FuzzyExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuzzyExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuzzyExpAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getFuzzyExpAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FuzzyExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuzzyExp__Group__1__Impl
	rule__FuzzyExp__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuzzyExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuzzyExpAccess().getExpressionAssignment_1()); }
(rule__FuzzyExp__ExpressionAssignment_1)
{ after(grammarAccess.getFuzzyExpAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FuzzyExp__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FuzzyExp__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuzzyExp__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuzzyExpAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getFuzzyExpAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__BehaviorNode__ComponentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorNodeAccess().getComponentIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getBehaviorNodeAccess().getComponentIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorNode__BehaviorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorNodeAccess().getBehaviorBehaviorParserRuleCall_1_0()); }
	ruleBehavior{ after(grammarAccess.getBehaviorNodeAccess().getBehaviorBehaviorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateRealisation__StateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateRealisationAccess().getStateBinaryExpressionParserRuleCall_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getStateRealisationAccess().getStateBinaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__AttributeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getAttributeIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getAttributeRealisationAccess().getAttributeIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeRealisation__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeRealisationAccess().getValueBinaryExpressionParserRuleCall_3_0()); }
	ruleBinaryExpression{ after(grammarAccess.getAttributeRealisationAccess().getValueBinaryExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Guard__StateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGuardAccess().getStateBinaryExpressionParserRuleCall_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getGuardAccess().getStateBinaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiation__ComponentAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationAccess().getComponentIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getComponentInstantiationAccess().getComponentIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentInstantiation__ComponentSetAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentInstantiationAccess().getComponentSetBinaryExpressionParserRuleCall_3_0()); }
	ruleBinaryExpression{ after(grammarAccess.getComponentInstantiationAccess().getComponentSetBinaryExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getLeftBinaryExpressionParserRuleCall_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getBinaryRelationAccess().getLeftBinaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__OperatorAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getOperatorBinarySymbolEnumRuleCall_2_0_0()); }
	rulebinarySymbol{ after(grammarAccess.getBinaryRelationAccess().getOperatorBinarySymbolEnumRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryRelation__RightAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryRelationAccess().getRightBinaryExpressionParserRuleCall_2_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getBinaryRelationAccess().getRightBinaryExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__LeftExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getLeftExpressionValueParserRuleCall_0_0()); }
	ruleValue{ after(grammarAccess.getBinaryExpressionAccess().getLeftExpressionValueParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getOperatorBinaryOperatorEnumRuleCall_1_0_0()); }
	ruleBinaryOperator{ after(grammarAccess.getBinaryExpressionAccess().getOperatorBinaryOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryExpression__RightExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryExpressionAccess().getRightExpressionBinaryExpressionParserRuleCall_1_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getBinaryExpressionAccess().getRightExpressionBinaryExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__ObjectAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getObjectIdentifierParserRuleCall_0()); }
	ruleIdentifier{ after(grammarAccess.getReferenceAccess().getObjectIdentifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionApplication__FunctionNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionApplicationAccess().getFunctionNameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getFunctionApplicationAccess().getFunctionNameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionApplication__ParameterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionApplicationAccess().getParameterBinaryExpressionParserRuleCall_2_0()); }
	ruleBinaryExpression{ after(grammarAccess.getFunctionApplicationAccess().getParameterBinaryExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BracketedExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracketedExpressionAccess().getExpressionBinaryRelationParserRuleCall_1_0()); }
	ruleBinaryRelation{ after(grammarAccess.getBracketedExpressionAccess().getExpressionBinaryRelationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cardinality__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCardinalityAccess().getExpressionBinaryExpressionParserRuleCall_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getCardinalityAccess().getExpressionBinaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratedSet__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratedSetAccess().getExpressionsBinaryExpressionParserRuleCall_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getEnumeratedSetAccess().getExpressionsBinaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FuzzyExp__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFuzzyExpAccess().getExpressionBinaryExpressionParserRuleCall_1_0()); }
	ruleBinaryExpression{ after(grammarAccess.getFuzzyExpAccess().getExpressionBinaryExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


