/*
* generated by Xtext
*/

package org.be.textbe.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBehaviorNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentInstantiationNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//	BehaviorNode | ComponentInstantiationNode;
		public ParserRule getRule() { return rule; }

		//BehaviorNode | ComponentInstantiationNode
		public Alternatives getAlternatives() { return cAlternatives; }

		//BehaviorNode
		public RuleCall getBehaviorNodeParserRuleCall_0() { return cBehaviorNodeParserRuleCall_0; }

		//ComponentInstantiationNode
		public RuleCall getComponentInstantiationNodeParserRuleCall_1() { return cComponentInstantiationNodeParserRuleCall_1; }
	}

	public class BehaviorNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentIdentifierParserRuleCall_0_0 = (RuleCall)cComponentAssignment_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorBehaviorParserRuleCall_1_0 = (RuleCall)cBehaviorAssignment_1.eContents().get(0);
		
		//BehaviorNode:
		//	component=Identifier behavior=Behavior;
		public ParserRule getRule() { return rule; }

		//component=Identifier behavior=Behavior
		public Group getGroup() { return cGroup; }

		//component=Identifier
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }

		//Identifier
		public RuleCall getComponentIdentifierParserRuleCall_0_0() { return cComponentIdentifierParserRuleCall_0_0; }

		//behavior=Behavior
		public Assignment getBehaviorAssignment_1() { return cBehaviorAssignment_1; }

		//Behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_1_0() { return cBehaviorBehaviorParserRuleCall_1_0; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateRealisationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeRealisationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSelectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGuardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cInternalOutputEventParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInternalInputEventParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExternalOutputEventParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExternalInputEventParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Behavior:
		//	StateRealisation | AttributeRealisation | Event | Selection | Guard | InternalOutputEvent | InternalInputEvent |
		//	ExternalOutputEvent | ExternalInputEvent;
		public ParserRule getRule() { return rule; }

		//StateRealisation | AttributeRealisation | Event | Selection | Guard | InternalOutputEvent | InternalInputEvent |
		//ExternalOutputEvent | ExternalInputEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//StateRealisation
		public RuleCall getStateRealisationParserRuleCall_0() { return cStateRealisationParserRuleCall_0; }

		//AttributeRealisation
		public RuleCall getAttributeRealisationParserRuleCall_1() { return cAttributeRealisationParserRuleCall_1; }

		//Event
		public RuleCall getEventParserRuleCall_2() { return cEventParserRuleCall_2; }

		//Selection
		public RuleCall getSelectionParserRuleCall_3() { return cSelectionParserRuleCall_3; }

		//Guard
		public RuleCall getGuardParserRuleCall_4() { return cGuardParserRuleCall_4; }

		//InternalOutputEvent
		public RuleCall getInternalOutputEventParserRuleCall_5() { return cInternalOutputEventParserRuleCall_5; }

		//InternalInputEvent
		public RuleCall getInternalInputEventParserRuleCall_6() { return cInternalInputEventParserRuleCall_6; }

		//ExternalOutputEvent
		public RuleCall getExternalOutputEventParserRuleCall_7() { return cExternalOutputEventParserRuleCall_7; }

		//ExternalInputEvent
		public RuleCall getExternalInputEventParserRuleCall_8() { return cExternalInputEventParserRuleCall_8; }
	}

	public class StateRealisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateRealisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateBinaryExpressionParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StateRealisation:
		//	"[" state=BinaryExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" state=BinaryExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//state=BinaryExpression
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }

		//BinaryExpression
		public RuleCall getStateBinaryExpressionParserRuleCall_1_0() { return cStateBinaryExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class AttributeRealisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeRealisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeIdentifierParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueBinaryExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AttributeRealisation:
		//	"[" attribute=Identifier ":=" value=BinaryExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" attribute=Identifier ":=" value=BinaryExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//attribute=Identifier
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//Identifier
		public RuleCall getAttributeIdentifierParserRuleCall_1_0() { return cAttributeIdentifierParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//value=BinaryExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//BinaryExpression
		public RuleCall getValueBinaryExpressionParserRuleCall_3_0() { return cValueBinaryExpressionParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionApplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Selection:
		//	"?" FunctionApplication "?";
		public ParserRule getRule() { return rule; }

		//"?" FunctionApplication "?"
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_1() { return cFunctionApplicationParserRuleCall_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_2() { return cQuestionMarkKeyword_2; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionApplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Event:
		//	"??" FunctionApplication "??";
		public ParserRule getRule() { return rule; }

		//"??" FunctionApplication "??"
		public Group getGroup() { return cGroup; }

		//"??"
		public Keyword getQuestionMarkQuestionMarkKeyword_0() { return cQuestionMarkQuestionMarkKeyword_0; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_1() { return cFunctionApplicationParserRuleCall_1; }

		//"??"
		public Keyword getQuestionMarkQuestionMarkKeyword_2() { return cQuestionMarkQuestionMarkKeyword_2; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkQuestionMarkQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateBinaryExpressionParserRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		private final Keyword cQuestionMarkQuestionMarkQuestionMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Guard:
		//	"???" state=BinaryExpression "???";
		public ParserRule getRule() { return rule; }

		//"???" state=BinaryExpression "???"
		public Group getGroup() { return cGroup; }

		//"???"
		public Keyword getQuestionMarkQuestionMarkQuestionMarkKeyword_0() { return cQuestionMarkQuestionMarkQuestionMarkKeyword_0; }

		//state=BinaryExpression
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }

		//BinaryExpression
		public RuleCall getStateBinaryExpressionParserRuleCall_1_0() { return cStateBinaryExpressionParserRuleCall_1_0; }

		//"???"
		public Keyword getQuestionMarkQuestionMarkQuestionMarkKeyword_2() { return cQuestionMarkQuestionMarkQuestionMarkKeyword_2; }
	}

	public class InternalOutputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalOutputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionApplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InternalOutputEvent:
		//	"<" FunctionApplication ">";
		public ParserRule getRule() { return rule; }

		//"<" FunctionApplication ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_1() { return cFunctionApplicationParserRuleCall_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class InternalInputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalInputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionApplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InternalInputEvent:
		//	">" FunctionApplication "<";
		public ParserRule getRule() { return rule; }

		//">" FunctionApplication "<"
		public Group getGroup() { return cGroup; }

		//">"
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_1() { return cFunctionApplicationParserRuleCall_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
	}

	public class ExternalOutputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalOutputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionApplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExternalOutputEvent:
		//	"<<" FunctionApplication ">>";
		public ParserRule getRule() { return rule; }

		//"<<" FunctionApplication ">>"
		public Group getGroup() { return cGroup; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_1() { return cFunctionApplicationParserRuleCall_1; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
	}

	public class ExternalInputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalInputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionApplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExternalInputEvent:
		//	">>" FunctionApplication "<<";
		public ParserRule getRule() { return rule; }

		//">>" FunctionApplication "<<"
		public Group getGroup() { return cGroup; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_0() { return cGreaterThanSignGreaterThanSignKeyword_0; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_1() { return cFunctionApplicationParserRuleCall_1; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_2() { return cLessThanSignLessThanSignKeyword_2; }
	}

	public class ComponentInstantiationNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentInstantiationNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForAllParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForSomeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtLeastOneParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForOneArbitraryParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ComponentInstantiationNode:
		//	ForAll | ForSome | AtLeastOne | ForOneArbitrary;
		public ParserRule getRule() { return rule; }

		//ForAll | ForSome | AtLeastOne | ForOneArbitrary
		public Alternatives getAlternatives() { return cAlternatives; }

		//ForAll
		public RuleCall getForAllParserRuleCall_0() { return cForAllParserRuleCall_0; }

		//ForSome
		public RuleCall getForSomeParserRuleCall_1() { return cForSomeParserRuleCall_1; }

		//AtLeastOne
		public RuleCall getAtLeastOneParserRuleCall_2() { return cAtLeastOneParserRuleCall_2; }

		//ForOneArbitrary
		public RuleCall getForOneArbitraryParserRuleCall_3() { return cForOneArbitraryParserRuleCall_3; }
	}

	public class ForAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cComponentInstantiationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ForAll:
		//	"||" ComponentInstantiation;
		public ParserRule getRule() { return rule; }

		//"||" ComponentInstantiation
		public Group getGroup() { return cGroup; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0() { return cVerticalLineVerticalLineKeyword_0; }

		//ComponentInstantiation
		public RuleCall getComponentInstantiationParserRuleCall_1() { return cComponentInstantiationParserRuleCall_1; }
	}

	public class ForSomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForSome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cComponentInstantiationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ForSome:
		//	"%" ComponentInstantiation;
		public ParserRule getRule() { return rule; }

		//"%" ComponentInstantiation
		public Group getGroup() { return cGroup; }

		//"%"
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }

		//ComponentInstantiation
		public RuleCall getComponentInstantiationParserRuleCall_1() { return cComponentInstantiationParserRuleCall_1; }
	}

	public class AtLeastOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtLeastOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignPlusSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cComponentInstantiationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//AtLeastOne:
		//	"%+" ComponentInstantiation;
		public ParserRule getRule() { return rule; }

		//"%+" ComponentInstantiation
		public Group getGroup() { return cGroup; }

		//"%+"
		public Keyword getPercentSignPlusSignKeyword_0() { return cPercentSignPlusSignKeyword_0; }

		//ComponentInstantiation
		public RuleCall getComponentInstantiationParserRuleCall_1() { return cComponentInstantiationParserRuleCall_1; }
	}

	public class ForOneArbitraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForOneArbitrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cComponentInstantiationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ForOneArbitrary:
		//	"[]" ComponentInstantiation;
		public ParserRule getRule() { return rule; }

		//"[]" ComponentInstantiation
		public Group getGroup() { return cGroup; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_0() { return cLeftSquareBracketRightSquareBracketKeyword_0; }

		//ComponentInstantiation
		public RuleCall getComponentInstantiationParserRuleCall_1() { return cComponentInstantiationParserRuleCall_1; }
	}

	public class ComponentInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentIdentifierParserRuleCall_0_0 = (RuleCall)cComponentAssignment_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentSetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentSetBinaryExpressionParserRuleCall_3_0 = (RuleCall)cComponentSetAssignment_3.eContents().get(0);
		
		//ComponentInstantiation:
		//	component=Identifier "#" ":" componentSet=BinaryExpression;
		public ParserRule getRule() { return rule; }

		//component=Identifier "#" ":" componentSet=BinaryExpression
		public Group getGroup() { return cGroup; }

		//component=Identifier
		public Assignment getComponentAssignment_0() { return cComponentAssignment_0; }

		//Identifier
		public RuleCall getComponentIdentifierParserRuleCall_0_0() { return cComponentIdentifierParserRuleCall_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//componentSet=BinaryExpression
		public Assignment getComponentSetAssignment_3() { return cComponentSetAssignment_3; }

		//BinaryExpression
		public RuleCall getComponentSetBinaryExpressionParserRuleCall_3_0() { return cComponentSetBinaryExpressionParserRuleCall_3_0; }
	}

	public class BinaryRelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryRelation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftBinaryExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOperatorBinarySymbolEnumRuleCall_2_0_0 = (RuleCall)cOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cRightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightBinaryExpressionParserRuleCall_2_1_0 = (RuleCall)cRightAssignment_2_1.eContents().get(0);
		
		//BinaryRelation:
		//	"NOT"? left=BinaryExpression (operator=binarySymbol right=BinaryExpression)?;
		public ParserRule getRule() { return rule; }

		//"NOT"? left=BinaryExpression (operator=binarySymbol right=BinaryExpression)?
		public Group getGroup() { return cGroup; }

		//"NOT"?
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }

		//left=BinaryExpression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//BinaryExpression
		public RuleCall getLeftBinaryExpressionParserRuleCall_1_0() { return cLeftBinaryExpressionParserRuleCall_1_0; }

		//(operator=binarySymbol right=BinaryExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//operator=binarySymbol
		public Assignment getOperatorAssignment_2_0() { return cOperatorAssignment_2_0; }

		//binarySymbol
		public RuleCall getOperatorBinarySymbolEnumRuleCall_2_0_0() { return cOperatorBinarySymbolEnumRuleCall_2_0_0; }

		//right=BinaryExpression
		public Assignment getRightAssignment_2_1() { return cRightAssignment_2_1; }

		//BinaryExpression
		public RuleCall getRightBinaryExpressionParserRuleCall_2_1_0() { return cRightBinaryExpressionParserRuleCall_2_1_0; }
	}

	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftExpressionValueParserRuleCall_0_0 = (RuleCall)cLeftExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorBinaryOperatorEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpressionBinaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightExpressionAssignment_1_1.eContents().get(0);
		
		//BinaryExpression:
		//	leftExpression=Value (operator=BinaryOperator rightExpression=BinaryExpression)?;
		public ParserRule getRule() { return rule; }

		//leftExpression=Value (operator=BinaryOperator rightExpression=BinaryExpression)?
		public Group getGroup() { return cGroup; }

		//leftExpression=Value
		public Assignment getLeftExpressionAssignment_0() { return cLeftExpressionAssignment_0; }

		//Value
		public RuleCall getLeftExpressionValueParserRuleCall_0_0() { return cLeftExpressionValueParserRuleCall_0_0; }

		//(operator=BinaryOperator rightExpression=BinaryExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=BinaryOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//BinaryOperator
		public RuleCall getOperatorBinaryOperatorEnumRuleCall_1_0_0() { return cOperatorBinaryOperatorEnumRuleCall_1_0_0; }

		//rightExpression=BinaryExpression
		public Assignment getRightExpressionAssignment_1_1() { return cRightExpressionAssignment_1_1; }

		//BinaryExpression
		public RuleCall getRightExpressionBinaryExpressionParserRuleCall_1_1_0() { return cRightExpressionBinaryExpressionParserRuleCall_1_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionApplicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBracketedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCardinalityParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEnumeratedSetParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFuzzyExpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Value:
		//	Reference | Number | FunctionApplication | BracketedExpression | Cardinality | EnumeratedSet | FuzzyExp;
		public ParserRule getRule() { return rule; }

		//Reference | Number | FunctionApplication | BracketedExpression | Cardinality | EnumeratedSet | FuzzyExp
		public Alternatives getAlternatives() { return cAlternatives; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//Number
		public RuleCall getNumberParserRuleCall_1() { return cNumberParserRuleCall_1; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_2() { return cFunctionApplicationParserRuleCall_2; }

		//BracketedExpression
		public RuleCall getBracketedExpressionParserRuleCall_3() { return cBracketedExpressionParserRuleCall_3; }

		//Cardinality
		public RuleCall getCardinalityParserRuleCall_4() { return cCardinalityParserRuleCall_4; }

		//EnumeratedSet
		public RuleCall getEnumeratedSetParserRuleCall_5() { return cEnumeratedSetParserRuleCall_5; }

		//FuzzyExp
		public RuleCall getFuzzyExpParserRuleCall_6() { return cFuzzyExpParserRuleCall_6; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Assignment cObjectAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjectIdentifierParserRuleCall_0 = (RuleCall)cObjectAssignment.eContents().get(0);
		
		//Reference:
		//	object=Identifier;
		public ParserRule getRule() { return rule; }

		//object=Identifier
		public Assignment getObjectAssignment() { return cObjectAssignment; }

		//Identifier
		public RuleCall getObjectIdentifierParserRuleCall_0() { return cObjectIdentifierParserRuleCall_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Identifier:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Number:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FunctionApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameIdentifierParserRuleCall_0_0 = (RuleCall)cFunctionNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterBinaryExpressionParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionApplication:
		//	functionName=Identifier "(" parameter+=BinaryExpression ")";
		public ParserRule getRule() { return rule; }

		//functionName=Identifier "(" parameter+=BinaryExpression ")"
		public Group getGroup() { return cGroup; }

		//functionName=Identifier
		public Assignment getFunctionNameAssignment_0() { return cFunctionNameAssignment_0; }

		//Identifier
		public RuleCall getFunctionNameIdentifierParserRuleCall_0_0() { return cFunctionNameIdentifierParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameter+=BinaryExpression
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//BinaryExpression
		public RuleCall getParameterBinaryExpressionParserRuleCall_2_0() { return cParameterBinaryExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BracketedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionBinaryRelationParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketedExpression:
		//	"(" expression=BinaryRelation ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=BinaryRelation ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=BinaryRelation
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//BinaryRelation
		public RuleCall getExpressionBinaryRelationParserRuleCall_1_0() { return cExpressionBinaryRelationParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cardinality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionBinaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Cardinality:
		//	"|" expression=BinaryExpression "|";
		public ParserRule getRule() { return rule; }

		//"|" expression=BinaryExpression "|"
		public Group getGroup() { return cGroup; }

		//"|"
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }

		//expression=BinaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//BinaryExpression
		public RuleCall getExpressionBinaryExpressionParserRuleCall_1_0() { return cExpressionBinaryExpressionParserRuleCall_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
	}

	public class EnumeratedSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumeratedSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsBinaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//EnumeratedSet:
		//	"{" expressions+=BinaryExpression "}";
		public ParserRule getRule() { return rule; }

		//"{" expressions+=BinaryExpression "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//expressions+=BinaryExpression
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//BinaryExpression
		public RuleCall getExpressionsBinaryExpressionParserRuleCall_1_0() { return cExpressionsBinaryExpressionParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class FuzzyExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FuzzyExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionBinaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FuzzyExp:
		//	"[" expression=BinaryExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" expression=BinaryExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expression=BinaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//BinaryExpression
		public RuleCall getExpressionBinaryExpressionParserRuleCall_1_0() { return cExpressionBinaryExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	
	
	public class BinarySymbolElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "binarySymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESS_THANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESS_THANLessThanSignKeyword_0_0 = (Keyword)cLESS_THANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATER_THANGreaterThanSignKeyword_1_0 = (Keyword)cGREATER_THANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUAL_TOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUAL_TOEqualsSignKeyword_2_0 = (Keyword)cEQUAL_TOEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_THAN_OR_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_THAN_OR_EQUALEqualsSignLessThanSignKeyword_3_0 = (Keyword)cLESS_THAN_OR_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_THAN_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCOLONEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCOLONColonKeyword_5_0 = (Keyword)cCOLONEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSUBSET_EXPEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSUBSET_EXPLessThanSignColonKeyword_6_0 = (Keyword)cSUBSET_EXPEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum binarySymbol:
		//	LESS_THAN="<" | GREATER_THAN=">" | EQUAL_TO="=" | LESS_THAN_OR_EQUAL="=<" | GREATER_THAN_OR_EQUAL=">=" | COLON=":" |
		//	SUBSET_EXP="<:";
		public EnumRule getRule() { return rule; }

		//LESS_THAN="<" | GREATER_THAN=">" | EQUAL_TO="=" | LESS_THAN_OR_EQUAL="=<" | GREATER_THAN_OR_EQUAL=">=" | COLON=":" |
		//SUBSET_EXP="<:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LESS_THAN="<"
		public EnumLiteralDeclaration getLESS_THANEnumLiteralDeclaration_0() { return cLESS_THANEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLESS_THANLessThanSignKeyword_0_0() { return cLESS_THANLessThanSignKeyword_0_0; }

		//GREATER_THAN=">"
		public EnumLiteralDeclaration getGREATER_THANEnumLiteralDeclaration_1() { return cGREATER_THANEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGREATER_THANGreaterThanSignKeyword_1_0() { return cGREATER_THANGreaterThanSignKeyword_1_0; }

		//EQUAL_TO="="
		public EnumLiteralDeclaration getEQUAL_TOEnumLiteralDeclaration_2() { return cEQUAL_TOEnumLiteralDeclaration_2; }

		//"="
		public Keyword getEQUAL_TOEqualsSignKeyword_2_0() { return cEQUAL_TOEqualsSignKeyword_2_0; }

		//LESS_THAN_OR_EQUAL="=<"
		public EnumLiteralDeclaration getLESS_THAN_OR_EQUALEnumLiteralDeclaration_3() { return cLESS_THAN_OR_EQUALEnumLiteralDeclaration_3; }

		//"=<"
		public Keyword getLESS_THAN_OR_EQUALEqualsSignLessThanSignKeyword_3_0() { return cLESS_THAN_OR_EQUALEqualsSignLessThanSignKeyword_3_0; }

		//GREATER_THAN_OR_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4() { return cGREATER_THAN_OR_EQUALEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGREATER_THAN_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0() { return cGREATER_THAN_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0; }

		//COLON=":"
		public EnumLiteralDeclaration getCOLONEnumLiteralDeclaration_5() { return cCOLONEnumLiteralDeclaration_5; }

		//":"
		public Keyword getCOLONColonKeyword_5_0() { return cCOLONColonKeyword_5_0; }

		//SUBSET_EXP="<:"
		public EnumLiteralDeclaration getSUBSET_EXPEnumLiteralDeclaration_6() { return cSUBSET_EXPEnumLiteralDeclaration_6; }

		//"<:"
		public Keyword getSUBSET_EXPLessThanSignColonKeyword_6_0() { return cSUBSET_EXPLessThanSignColonKeyword_6_0; }
	}

	public class BinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTERSECTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTERSECTGreaterThanSignLessThanSignKeyword_2_0 = (Keyword)cINTERSECTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryOperator:
		//	PLUS="+" | MINUS="-" | INTERSECT="><";
		public EnumRule getRule() { return rule; }

		//PLUS="+" | MINUS="-" | INTERSECT="><"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }

		//INTERSECT="><"
		public EnumLiteralDeclaration getINTERSECTEnumLiteralDeclaration_2() { return cINTERSECTEnumLiteralDeclaration_2; }

		//"><"
		public Keyword getINTERSECTGreaterThanSignLessThanSignKeyword_2_0() { return cINTERSECTGreaterThanSignLessThanSignKeyword_2_0; }
	}
	
	private NodeElements pNode;
	private BehaviorNodeElements pBehaviorNode;
	private BehaviorElements pBehavior;
	private StateRealisationElements pStateRealisation;
	private AttributeRealisationElements pAttributeRealisation;
	private SelectionElements pSelection;
	private EventElements pEvent;
	private GuardElements pGuard;
	private InternalOutputEventElements pInternalOutputEvent;
	private InternalInputEventElements pInternalInputEvent;
	private ExternalOutputEventElements pExternalOutputEvent;
	private ExternalInputEventElements pExternalInputEvent;
	private ComponentInstantiationNodeElements pComponentInstantiationNode;
	private ForAllElements pForAll;
	private ForSomeElements pForSome;
	private AtLeastOneElements pAtLeastOne;
	private ForOneArbitraryElements pForOneArbitrary;
	private ComponentInstantiationElements pComponentInstantiation;
	private BinaryRelationElements pBinaryRelation;
	private BinarySymbolElements unknownRuleBinarySymbol;
	private BinaryExpressionElements pBinaryExpression;
	private BinaryOperatorElements unknownRuleBinaryOperator;
	private ValueElements pValue;
	private ReferenceElements pReference;
	private IdentifierElements pIdentifier;
	private NumberElements pNumber;
	private FunctionApplicationElements pFunctionApplication;
	private BracketedExpressionElements pBracketedExpression;
	private CardinalityElements pCardinality;
	private EnumeratedSetElements pEnumeratedSet;
	private FuzzyExpElements pFuzzyExp;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Node:
	//	BehaviorNode | ComponentInstantiationNode;
	public NodeElements getNodeAccess() {
		return (pNode != null) ? pNode : (pNode = new NodeElements());
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//BehaviorNode:
	//	component=Identifier behavior=Behavior;
	public BehaviorNodeElements getBehaviorNodeAccess() {
		return (pBehaviorNode != null) ? pBehaviorNode : (pBehaviorNode = new BehaviorNodeElements());
	}
	
	public ParserRule getBehaviorNodeRule() {
		return getBehaviorNodeAccess().getRule();
	}

	//Behavior:
	//	StateRealisation | AttributeRealisation | Event | Selection | Guard | InternalOutputEvent | InternalInputEvent |
	//	ExternalOutputEvent | ExternalInputEvent;
	public BehaviorElements getBehaviorAccess() {
		return (pBehavior != null) ? pBehavior : (pBehavior = new BehaviorElements());
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//StateRealisation:
	//	"[" state=BinaryExpression "]";
	public StateRealisationElements getStateRealisationAccess() {
		return (pStateRealisation != null) ? pStateRealisation : (pStateRealisation = new StateRealisationElements());
	}
	
	public ParserRule getStateRealisationRule() {
		return getStateRealisationAccess().getRule();
	}

	//AttributeRealisation:
	//	"[" attribute=Identifier ":=" value=BinaryExpression "]";
	public AttributeRealisationElements getAttributeRealisationAccess() {
		return (pAttributeRealisation != null) ? pAttributeRealisation : (pAttributeRealisation = new AttributeRealisationElements());
	}
	
	public ParserRule getAttributeRealisationRule() {
		return getAttributeRealisationAccess().getRule();
	}

	//Selection:
	//	"?" FunctionApplication "?";
	public SelectionElements getSelectionAccess() {
		return (pSelection != null) ? pSelection : (pSelection = new SelectionElements());
	}
	
	public ParserRule getSelectionRule() {
		return getSelectionAccess().getRule();
	}

	//Event:
	//	"??" FunctionApplication "??";
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Guard:
	//	"???" state=BinaryExpression "???";
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//InternalOutputEvent:
	//	"<" FunctionApplication ">";
	public InternalOutputEventElements getInternalOutputEventAccess() {
		return (pInternalOutputEvent != null) ? pInternalOutputEvent : (pInternalOutputEvent = new InternalOutputEventElements());
	}
	
	public ParserRule getInternalOutputEventRule() {
		return getInternalOutputEventAccess().getRule();
	}

	//InternalInputEvent:
	//	">" FunctionApplication "<";
	public InternalInputEventElements getInternalInputEventAccess() {
		return (pInternalInputEvent != null) ? pInternalInputEvent : (pInternalInputEvent = new InternalInputEventElements());
	}
	
	public ParserRule getInternalInputEventRule() {
		return getInternalInputEventAccess().getRule();
	}

	//ExternalOutputEvent:
	//	"<<" FunctionApplication ">>";
	public ExternalOutputEventElements getExternalOutputEventAccess() {
		return (pExternalOutputEvent != null) ? pExternalOutputEvent : (pExternalOutputEvent = new ExternalOutputEventElements());
	}
	
	public ParserRule getExternalOutputEventRule() {
		return getExternalOutputEventAccess().getRule();
	}

	//ExternalInputEvent:
	//	">>" FunctionApplication "<<";
	public ExternalInputEventElements getExternalInputEventAccess() {
		return (pExternalInputEvent != null) ? pExternalInputEvent : (pExternalInputEvent = new ExternalInputEventElements());
	}
	
	public ParserRule getExternalInputEventRule() {
		return getExternalInputEventAccess().getRule();
	}

	//ComponentInstantiationNode:
	//	ForAll | ForSome | AtLeastOne | ForOneArbitrary;
	public ComponentInstantiationNodeElements getComponentInstantiationNodeAccess() {
		return (pComponentInstantiationNode != null) ? pComponentInstantiationNode : (pComponentInstantiationNode = new ComponentInstantiationNodeElements());
	}
	
	public ParserRule getComponentInstantiationNodeRule() {
		return getComponentInstantiationNodeAccess().getRule();
	}

	//ForAll:
	//	"||" ComponentInstantiation;
	public ForAllElements getForAllAccess() {
		return (pForAll != null) ? pForAll : (pForAll = new ForAllElements());
	}
	
	public ParserRule getForAllRule() {
		return getForAllAccess().getRule();
	}

	//ForSome:
	//	"%" ComponentInstantiation;
	public ForSomeElements getForSomeAccess() {
		return (pForSome != null) ? pForSome : (pForSome = new ForSomeElements());
	}
	
	public ParserRule getForSomeRule() {
		return getForSomeAccess().getRule();
	}

	//AtLeastOne:
	//	"%+" ComponentInstantiation;
	public AtLeastOneElements getAtLeastOneAccess() {
		return (pAtLeastOne != null) ? pAtLeastOne : (pAtLeastOne = new AtLeastOneElements());
	}
	
	public ParserRule getAtLeastOneRule() {
		return getAtLeastOneAccess().getRule();
	}

	//ForOneArbitrary:
	//	"[]" ComponentInstantiation;
	public ForOneArbitraryElements getForOneArbitraryAccess() {
		return (pForOneArbitrary != null) ? pForOneArbitrary : (pForOneArbitrary = new ForOneArbitraryElements());
	}
	
	public ParserRule getForOneArbitraryRule() {
		return getForOneArbitraryAccess().getRule();
	}

	//ComponentInstantiation:
	//	component=Identifier "#" ":" componentSet=BinaryExpression;
	public ComponentInstantiationElements getComponentInstantiationAccess() {
		return (pComponentInstantiation != null) ? pComponentInstantiation : (pComponentInstantiation = new ComponentInstantiationElements());
	}
	
	public ParserRule getComponentInstantiationRule() {
		return getComponentInstantiationAccess().getRule();
	}

	//BinaryRelation:
	//	"NOT"? left=BinaryExpression (operator=binarySymbol right=BinaryExpression)?;
	public BinaryRelationElements getBinaryRelationAccess() {
		return (pBinaryRelation != null) ? pBinaryRelation : (pBinaryRelation = new BinaryRelationElements());
	}
	
	public ParserRule getBinaryRelationRule() {
		return getBinaryRelationAccess().getRule();
	}

	//enum binarySymbol:
	//	LESS_THAN="<" | GREATER_THAN=">" | EQUAL_TO="=" | LESS_THAN_OR_EQUAL="=<" | GREATER_THAN_OR_EQUAL=">=" | COLON=":" |
	//	SUBSET_EXP="<:";
	public BinarySymbolElements getBinarySymbolAccess() {
		return (unknownRuleBinarySymbol != null) ? unknownRuleBinarySymbol : (unknownRuleBinarySymbol = new BinarySymbolElements());
	}
	
	public EnumRule getBinarySymbolRule() {
		return getBinarySymbolAccess().getRule();
	}

	//BinaryExpression:
	//	leftExpression=Value (operator=BinaryOperator rightExpression=BinaryExpression)?;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return (pBinaryExpression != null) ? pBinaryExpression : (pBinaryExpression = new BinaryExpressionElements());
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}

	//enum BinaryOperator:
	//	PLUS="+" | MINUS="-" | INTERSECT="><";
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return (unknownRuleBinaryOperator != null) ? unknownRuleBinaryOperator : (unknownRuleBinaryOperator = new BinaryOperatorElements());
	}
	
	public EnumRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}

	//Value:
	//	Reference | Number | FunctionApplication | BracketedExpression | Cardinality | EnumeratedSet | FuzzyExp;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Reference:
	//	object=Identifier;
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//Identifier:
	//	ID ("." ID)*;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Number:
	//	value=INT;
	public NumberElements getNumberAccess() {
		return (pNumber != null) ? pNumber : (pNumber = new NumberElements());
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//FunctionApplication:
	//	functionName=Identifier "(" parameter+=BinaryExpression ")";
	public FunctionApplicationElements getFunctionApplicationAccess() {
		return (pFunctionApplication != null) ? pFunctionApplication : (pFunctionApplication = new FunctionApplicationElements());
	}
	
	public ParserRule getFunctionApplicationRule() {
		return getFunctionApplicationAccess().getRule();
	}

	//BracketedExpression:
	//	"(" expression=BinaryRelation ")";
	public BracketedExpressionElements getBracketedExpressionAccess() {
		return (pBracketedExpression != null) ? pBracketedExpression : (pBracketedExpression = new BracketedExpressionElements());
	}
	
	public ParserRule getBracketedExpressionRule() {
		return getBracketedExpressionAccess().getRule();
	}

	//Cardinality:
	//	"|" expression=BinaryExpression "|";
	public CardinalityElements getCardinalityAccess() {
		return (pCardinality != null) ? pCardinality : (pCardinality = new CardinalityElements());
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}

	//EnumeratedSet:
	//	"{" expressions+=BinaryExpression "}";
	public EnumeratedSetElements getEnumeratedSetAccess() {
		return (pEnumeratedSet != null) ? pEnumeratedSet : (pEnumeratedSet = new EnumeratedSetElements());
	}
	
	public ParserRule getEnumeratedSetRule() {
		return getEnumeratedSetAccess().getRule();
	}

	//FuzzyExp:
	//	"[" expression=BinaryExpression "]";
	public FuzzyExpElements getFuzzyExpAccess() {
		return (pFuzzyExp != null) ? pFuzzyExp : (pFuzzyExp = new FuzzyExpElements());
	}
	
	public ParserRule getFuzzyExpRule() {
		return getFuzzyExpAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
