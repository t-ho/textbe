grammar org.be.textbe.Expressions with org.eclipse.xtext.common.Terminals

generate expressions "http://www.be.org/textbe/Expressions"

Node:
	(BehaviorNode | ComponentInstantiationNode);

BehaviorNode:
	component=Identifier behavior=Behavior;

Behavior:
	StateRealisation | AttributeRealisation | Event | Selection | Guard
	| InternalOutputEvent | InternalInputEvent | ExternalOutputEvent | ExternalInputEvent;

StateRealisation:
	'[' state=(BinaryExpression) ']';

AttributeRealisation:
	'[' attribute=Identifier ':=' value=BinaryExpression ']';

Selection:
	'?' FunctionApplication '?';

Event:
	'??' FunctionApplication '??';

Guard:
	'???' state=BinaryExpression '???';

InternalOutputEvent:
	'<' FunctionApplication '>';

InternalInputEvent:
	'>' FunctionApplication '<';

ExternalOutputEvent:
	'<<' FunctionApplication '>>';

ExternalInputEvent:
	'>>' FunctionApplication '<<';

ComponentInstantiationNode:
	ForAll | ForSome | AtLeastOne | ForOneArbitrary;

ForAll:
	'||' ComponentInstantiation;

ForSome:
	'%' ComponentInstantiation;

AtLeastOne:
	'%+' ComponentInstantiation;

ForOneArbitrary:
	'[]' ComponentInstantiation;

ComponentInstantiation:
	component=Identifier '#' ':' componentSet=BinaryExpression;

BinaryRelation:
	'NOT'? left=BinaryExpression (operator=binarySymbol right=BinaryExpression)?;

enum binarySymbol:
	LESS_THAN='<' | GREATER_THAN='>' | EQUAL_TO='=' | LESS_THAN_OR_EQUAL='=<' | GREATER_THAN_OR_EQUAL='>=' | COLON=':' |
	SUBSET_EXP='<:';

BinaryExpression:
	leftExpression=Value (operator=BinaryOperator rightExpression=BinaryExpression)?;

enum BinaryOperator:
	PLUS='+' | MINUS='-' | INTERSECT='><';

Value:
	(Reference | Number | FunctionApplication | BracketedExpression | Cardinality | EnumeratedSet | FuzzyExp);

Reference:
	object=Identifier;

Identifier:
	ID ('.' ID)*;

Number:
	value=INT;

FunctionApplication:
	functionName=Identifier '(' parameter+=BinaryExpression ')';

BracketedExpression:
	'(' expression=BinaryRelation ')';

Cardinality:
	'|' expression=BinaryExpression '|';

EnumeratedSet:
	'{' expressions+=BinaryExpression '}';

FuzzyExp:
	'[' expression=BinaryExpression ']';