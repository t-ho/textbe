/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.be.textbe.bt.v1.textbt.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.be.textbe.bt.v1.textbt.util.TextbtAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TextbtItemProviderAdapterFactory extends TextbtAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TextbtItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Specification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationItemProvider specificationItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Specification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationAdapter() {
		if (specificationItemProvider == null) {
			specificationItemProvider = new SpecificationItemProvider(this);
		}

		return specificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.StateRealization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateRealizationItemProvider stateRealizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.StateRealization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateRealizationAdapter() {
		if (stateRealizationItemProvider == null) {
			stateRealizationItemProvider = new StateRealizationItemProvider(this);
		}

		return stateRealizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Selection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelectionItemProvider selectionItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Selection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelectionAdapter() {
		if (selectionItemProvider == null) {
			selectionItemProvider = new SelectionItemProvider(this);
		}

		return selectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Guard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardItemProvider guardItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Guard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardAdapter() {
		if (guardItemProvider == null) {
			guardItemProvider = new GuardItemProvider(this);
		}

		return guardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.InternalInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalInputItemProvider internalInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.InternalInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalInputAdapter() {
		if (internalInputItemProvider == null) {
			internalInputItemProvider = new InternalInputItemProvider(this);
		}

		return internalInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.InternalOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InternalOutputItemProvider internalOutputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.InternalOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInternalOutputAdapter() {
		if (internalOutputItemProvider == null) {
			internalOutputItemProvider = new InternalOutputItemProvider(this);
		}

		return internalOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.ExternalInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalInputItemProvider externalInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.ExternalInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalInputAdapter() {
		if (externalInputItemProvider == null) {
			externalInputItemProvider = new ExternalInputItemProvider(this);
		}

		return externalInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.ExternalOutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalOutputItemProvider externalOutputItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.ExternalOutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalOutputAdapter() {
		if (externalOutputItemProvider == null) {
			externalOutputItemProvider = new ExternalOutputItemProvider(this);
		}

		return externalOutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.TraceabilityLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceabilityLinkItemProvider traceabilityLinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.TraceabilityLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceabilityLinkAdapter() {
		if (traceabilityLinkItemProvider == null) {
			traceabilityLinkItemProvider = new TraceabilityLinkItemProvider(this);
		}

		return traceabilityLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Parallel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelItemProvider parallelItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Parallel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelAdapter() {
		if (parallelItemProvider == null) {
			parallelItemProvider = new ParallelItemProvider(this);
		}

		return parallelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Alternative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlternativeItemProvider alternativeItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Alternative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlternativeAdapter() {
		if (alternativeItemProvider == null) {
			alternativeItemProvider = new AlternativeItemProvider(this);
		}

		return alternativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Atomic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AtomicItemProvider atomicItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Atomic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAtomicAdapter() {
		if (atomicItemProvider == null) {
			atomicItemProvider = new AtomicItemProvider(this);
		}

		return atomicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Interleaving} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterleavingItemProvider interleavingItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Interleaving}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterleavingAdapter() {
		if (interleavingItemProvider == null) {
			interleavingItemProvider = new InterleavingItemProvider(this);
		}

		return interleavingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Assertion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssertionItemProvider assertionItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Assertion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssertionAdapter() {
		if (assertionItemProvider == null) {
			assertionItemProvider = new AssertionItemProvider(this);
		}

		return assertionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Who} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhoItemProvider whoItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Who}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhoAdapter() {
		if (whoItemProvider == null) {
			whoItemProvider = new WhoItemProvider(this);
		}

		return whoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.What} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhatItemProvider whatItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.What}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhatAdapter() {
		if (whatItemProvider == null) {
			whatItemProvider = new WhatItemProvider(this);
		}

		return whatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Where} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhereItemProvider whereItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Where}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhereAdapter() {
		if (whereItemProvider == null) {
			whereItemProvider = new WhereItemProvider(this);
		}

		return whereItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.When} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhenItemProvider whenItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.When}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhenAdapter() {
		if (whenItemProvider == null) {
			whenItemProvider = new WhenItemProvider(this);
		}

		return whenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.Why} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhyItemProvider whyItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.Why}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhyAdapter() {
		if (whyItemProvider == null) {
			whyItemProvider = new WhyItemProvider(this);
		}

		return whyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.How} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HowItemProvider howItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.How}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHowAdapter() {
		if (howItemProvider == null) {
			howItemProvider = new HowItemProvider(this);
		}

		return howItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.AttributeRealization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeRealizationItemProvider attributeRealizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.AttributeRealization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeRealizationAdapter() {
		if (attributeRealizationItemProvider == null) {
			attributeRealizationItemProvider = new AttributeRealizationItemProvider(this);
		}

		return attributeRealizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.be.textbe.bt.v1.textbt.SystemComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemComponentItemProvider systemComponentItemProvider;

	/**
	 * This creates an adapter for a {@link org.be.textbe.bt.v1.textbt.SystemComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemComponentAdapter() {
		if (systemComponentItemProvider == null) {
			systemComponentItemProvider = new SystemComponentItemProvider(this);
		}

		return systemComponentItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (specificationItemProvider != null) specificationItemProvider.dispose();
		if (requirementItemProvider != null) requirementItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (stateRealizationItemProvider != null) stateRealizationItemProvider.dispose();
		if (selectionItemProvider != null) selectionItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (guardItemProvider != null) guardItemProvider.dispose();
		if (internalInputItemProvider != null) internalInputItemProvider.dispose();
		if (internalOutputItemProvider != null) internalOutputItemProvider.dispose();
		if (externalInputItemProvider != null) externalInputItemProvider.dispose();
		if (externalOutputItemProvider != null) externalOutputItemProvider.dispose();
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (traceabilityLinkItemProvider != null) traceabilityLinkItemProvider.dispose();
		if (parallelItemProvider != null) parallelItemProvider.dispose();
		if (alternativeItemProvider != null) alternativeItemProvider.dispose();
		if (atomicItemProvider != null) atomicItemProvider.dispose();
		if (interleavingItemProvider != null) interleavingItemProvider.dispose();
		if (assertionItemProvider != null) assertionItemProvider.dispose();
		if (whoItemProvider != null) whoItemProvider.dispose();
		if (whatItemProvider != null) whatItemProvider.dispose();
		if (whereItemProvider != null) whereItemProvider.dispose();
		if (whenItemProvider != null) whenItemProvider.dispose();
		if (whyItemProvider != null) whyItemProvider.dispose();
		if (howItemProvider != null) howItemProvider.dispose();
		if (attributeRealizationItemProvider != null) attributeRealizationItemProvider.dispose();
		if (systemComponentItemProvider != null) systemComponentItemProvider.dispose();
	}

}
