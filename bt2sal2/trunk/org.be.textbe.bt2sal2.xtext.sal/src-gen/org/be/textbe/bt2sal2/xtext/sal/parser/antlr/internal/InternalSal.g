/*
* generated by Xtext
*/
grammar InternalSal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.be.textbe.bt2sal2.xtext.sal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.be.textbe.bt2sal2.xtext.sal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.be.textbe.bt2sal2.xtext.sal.services.SalGrammarAccess;

}

@parser::members {

 	private SalGrammarAccess grammarAccess;
 	
    public InternalSalParser(TokenStream input, SalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Context";	
   	}
   	
   	@Override
   	protected SalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	 iv_ruleContext=ruleContext 
	 { $current=$iv_ruleContext.current; } 
	 EOF 
;

// Rule Context
ruleContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getContextAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContextRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1=': CONTEXT =' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextAccess().getCONTEXTKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getContextBodyContextBodyParserRuleCall_2_0()); 
	    }
		lv_contextBody_2_0=ruleContextBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		set(
       			$current, 
       			"contextBody",
        		lv_contextBody_2_0, 
        		"ContextBody");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleContextBody
entryRuleContextBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextBodyRule()); }
	 iv_ruleContextBody=ruleContextBody 
	 { $current=$iv_ruleContextBody.current; } 
	 EOF 
;

// Rule ContextBody
ruleContextBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BEGIN' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContextBodyAccess().getBEGINKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextBodyAccess().getDeclarationsDeclarationsParserRuleCall_1_0()); 
	    }
		lv_declarations_1_0=ruleDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextBodyRule());
	        }
       		set(
       			$current, 
       			"declarations",
        		lv_declarations_1_0, 
        		"Declarations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='END' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContextBodyAccess().getENDKeyword_2());
    }
)
;





// Entry rule entryRuleDeclarations
entryRuleDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationsRule()); }
	 iv_ruleDeclarations=ruleDeclarations 
	 { $current=$iv_ruleDeclarations.current; } 
	 EOF 
;

// Rule Declarations
ruleDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationsAccess().getDeclarationDeclarationParserRuleCall_0_0()); 
	    }
		lv_declaration_0_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_0_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeclarationsAccess().getSemicolonKeyword_1());
    }
)+
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getTypeDeclarationParserRuleCall_0()); 
    }
    this_TypeDeclaration_0=ruleTypeDeclaration
    { 
        $current = $this_TypeDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getModuleDeclarationParserRuleCall_1()); 
    }
    this_ModuleDeclaration_1=ruleModuleDeclaration
    { 
        $current = $this_ModuleDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getTypeDeclarationAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1=': TYPE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getTYPEKeyword_1());
    }
(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeDefTypeDefParserRuleCall_2_1_0()); 
	    }
		lv_typeDef_3_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeDef",
        		lv_typeDef_3_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getScalarTypeParserRuleCall_1()); 
    }
    this_ScalarType_1=ruleScalarType
    { 
        $current = $this_ScalarType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBasicTypeParserRuleCall_0()); 
    }
    this_BasicType_0=ruleBasicType
    { 
        $current = $this_BasicType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getNameParserRuleCall_1()); 
    }
    this_Name_1=ruleName
    { 
        $current = $this_Name_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getQualifiedNameParserRuleCall_2()); 
    }
    this_QualifiedName_2=ruleQualifiedName
    { 
        $current = $this_QualifiedName_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSubrangeParserRuleCall_3()); 
    }
    this_Subrange_3=ruleSubrange
    { 
        $current = $this_Subrange_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_type_0_0=	'BOOLEAN' 
    {
        newLeafNode(lv_type_0_0, grammarAccess.getBasicTypeAccess().getTypeBOOLEANKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicTypeRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_0, "BOOLEAN");
	    }

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current; } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier1_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier1_0_0, grammarAccess.getQualifiedNameAccess().getIdentifier1IDENTIFIERSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier1",
        		lv_identifier1_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getQualifiedNameAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNameAccess().getActualParametersActualParametersParserRuleCall_2_0()); 
	    }
		lv_actualParameters_2_0=ruleActualParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNameRule());
	        }
       		set(
       			$current, 
       			"actualParameters",
        		lv_actualParameters_2_0, 
        		"ActualParameters");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getQualifiedNameAccess().getRightCurlyBracketKeyword_3());
    }
	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQualifiedNameAccess().getExclamationMarkKeyword_4());
    }
(
(
		lv_identifier2_5_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier2_5_0, grammarAccess.getQualifiedNameAccess().getIdentifier2IDENTIFIERSTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQualifiedNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier2",
        		lv_identifier2_5_0, 
        		"IDENTIFIERS");
	    }

)
))
;





// Entry rule entryRuleActualParameters
entryRuleActualParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActualParametersRule()); }
	 iv_ruleActualParameters=ruleActualParameters 
	 { $current=$iv_ruleActualParameters.current; } 
	 EOF 
;

// Rule ActualParameters
ruleActualParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getActualParametersAccess().getTypeParserRuleCall()); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSubrange
entryRuleSubrange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubrangeRule()); }
	 iv_ruleSubrange=ruleSubrange 
	 { $current=$iv_ruleSubrange.current; } 
	 EOF 
;

// Rule Subrange
ruleSubrange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubrangeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubrangeAccess().getLowerBoundBoundParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubrangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubrangeAccess().getFullStopFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubrangeAccess().getUpperBoundBoundParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubrangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubrangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBound
entryRuleBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundRule()); }
	 iv_ruleBound=ruleBound 
	 { $current=$iv_ruleBound.current; } 
	 EOF 
;

// Rule Bound
ruleBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBoundAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleScalarType
entryRuleScalarType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScalarTypeRule()); }
	 iv_ruleScalarType=ruleScalarType 
	 { $current=$iv_ruleScalarType.current; } 
	 EOF 
;

// Rule ScalarType
ruleScalarType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScalarTypeAccess().getLeftCurlyBracketKeyword_0());
    }
((
(
		lv_nextType_1_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_nextType_1_0, grammarAccess.getScalarTypeAccess().getNextTypeIDENTIFIERSTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScalarTypeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"nextType",
        		lv_nextType_1_0, 
        		"IDENTIFIERS");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScalarTypeAccess().getCommaKeyword_1_1());
    }
)?)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScalarTypeAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleModuleDeclaration
entryRuleModuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleDeclarationRule()); }
	 iv_ruleModuleDeclaration=ruleModuleDeclaration 
	 { $current=$iv_ruleModuleDeclaration.current; } 
	 EOF 
;

// Rule ModuleDeclaration
ruleModuleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getModuleDeclarationAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1=': MODULE =' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleDeclarationAccess().getMODULEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleDeclarationAccess().getModuleModuleParserRuleCall_2_0()); 
	    }
		lv_module_2_0=ruleModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleDeclarationRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_2_0, 
        		"Module");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getModuleAccess().getBaseModuleParserRuleCall()); 
    }
    this_BaseModule_0=ruleBaseModule
    { 
        $current = $this_BaseModule_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBaseModule
entryRuleBaseModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseModuleRule()); }
	 iv_ruleBaseModule=ruleBaseModule 
	 { $current=$iv_ruleBaseModule.current; } 
	 EOF 
;

// Rule BaseModule
ruleBaseModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BEGIN' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBaseModuleAccess().getBEGINKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getBaseModuleAccess().getBaseDeclarationsParserRuleCall_1()); 
    }
    this_BaseDeclarations_1=ruleBaseDeclarations
    { 
        $current = $this_BaseDeclarations_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='END' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBaseModuleAccess().getENDKeyword_2());
    }
)
;





// Entry rule entryRuleBaseDeclarations
entryRuleBaseDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseDeclarationsRule()); }
	 iv_ruleBaseDeclarations=ruleBaseDeclarations 
	 { $current=$iv_ruleBaseDeclarations.current; } 
	 EOF 
;

// Rule BaseDeclarations
ruleBaseDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBaseDeclarationsAccess().getBaseDeclarationBaseDeclarationParserRuleCall_0()); 
	    }
		lv_baseDeclaration_0_0=ruleBaseDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBaseDeclarationsRule());
	        }
       		add(
       			$current, 
       			"baseDeclaration",
        		lv_baseDeclaration_0_0, 
        		"BaseDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleBaseDeclaration
entryRuleBaseDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseDeclarationRule()); }
	 iv_ruleBaseDeclaration=ruleBaseDeclaration 
	 { $current=$iv_ruleBaseDeclaration.current; } 
	 EOF 
;

// Rule BaseDeclaration
ruleBaseDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseDeclarationAccess().getInputDeclParserRuleCall_0()); 
    }
    this_InputDecl_0=ruleInputDecl
    { 
        $current = $this_InputDecl_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseDeclarationAccess().getOutputDeclParserRuleCall_1()); 
    }
    this_OutputDecl_1=ruleOutputDecl
    { 
        $current = $this_OutputDecl_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseDeclarationAccess().getLocalDeclParserRuleCall_2()); 
    }
    this_LocalDecl_2=ruleLocalDecl
    { 
        $current = $this_LocalDecl_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseDeclarationAccess().getDefDeclParserRuleCall_3()); 
    }
    this_DefDecl_3=ruleDefDecl
    { 
        $current = $this_DefDecl_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseDeclarationAccess().getInitDeclParserRuleCall_4()); 
    }
    this_InitDecl_4=ruleInitDecl
    { 
        $current = $this_InitDecl_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseDeclarationAccess().getTransDeclParserRuleCall_5()); 
    }
    this_TransDecl_5=ruleTransDecl
    { 
        $current = $this_TransDecl_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInputDecl
entryRuleInputDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputDeclRule()); }
	 iv_ruleInputDecl=ruleInputDecl 
	 { $current=$iv_ruleInputDecl.current; } 
	 EOF 
;

// Rule InputDecl
ruleInputDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='INPUT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInputDeclAccess().getINPUTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputDeclAccess().getVarDeclsVarDeclsParserRuleCall_1_0()); 
	    }
		lv_varDecls_1_0=ruleVarDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDeclRule());
	        }
       		set(
       			$current, 
       			"varDecls",
        		lv_varDecls_1_0, 
        		"VarDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOutputDecl
entryRuleOutputDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputDeclRule()); }
	 iv_ruleOutputDecl=ruleOutputDecl 
	 { $current=$iv_ruleOutputDecl.current; } 
	 EOF 
;

// Rule OutputDecl
ruleOutputDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='OUTPUT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutputDeclAccess().getOUTPUTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputDeclAccess().getVarDeclsVarDeclsParserRuleCall_1_0()); 
	    }
		lv_varDecls_1_0=ruleVarDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputDeclRule());
	        }
       		set(
       			$current, 
       			"varDecls",
        		lv_varDecls_1_0, 
        		"VarDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocalDecl
entryRuleLocalDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalDeclRule()); }
	 iv_ruleLocalDecl=ruleLocalDecl 
	 { $current=$iv_ruleLocalDecl.current; } 
	 EOF 
;

// Rule LocalDecl
ruleLocalDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='LOCAL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocalDeclAccess().getLOCALKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalDeclAccess().getVarDeclsVarDeclsParserRuleCall_1_0()); 
	    }
		lv_varDecls_1_0=ruleVarDecls		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalDeclRule());
	        }
       		set(
       			$current, 
       			"varDecls",
        		lv_varDecls_1_0, 
        		"VarDecls");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefDecl
entryRuleDefDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefDeclRule()); }
	 iv_ruleDefDecl=ruleDefDecl 
	 { $current=$iv_ruleDefDecl.current; } 
	 EOF 
;

// Rule DefDecl
ruleDefDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='DEFINITION' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefDeclAccess().getDEFINITIONKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefDeclAccess().getDefinitionsDefinitionsParserRuleCall_1_0()); 
	    }
		lv_definitions_1_0=ruleDefinitions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefDeclRule());
	        }
       		set(
       			$current, 
       			"definitions",
        		lv_definitions_1_0, 
        		"Definitions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInitDecl
entryRuleInitDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitDeclRule()); }
	 iv_ruleInitDecl=ruleInitDecl 
	 { $current=$iv_ruleInitDecl.current; } 
	 EOF 
;

// Rule InitDecl
ruleInitDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='INITIALIZATION' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitDeclAccess().getINITIALIZATIONKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInitDeclAccess().getDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0_0()); 
	    }
		lv_definitionOrCommand_1_0=ruleDefinitionOrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitDeclRule());
	        }
       		add(
       			$current, 
       			"definitionOrCommand",
        		lv_definitionOrCommand_1_0, 
        		"DefinitionOrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInitDeclAccess().getSemicolonKeyword_1_1());
    }
)?)+)
;





// Entry rule entryRuleTransDecl
entryRuleTransDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransDeclRule()); }
	 iv_ruleTransDecl=ruleTransDecl 
	 { $current=$iv_ruleTransDecl.current; } 
	 EOF 
;

// Rule TransDecl
ruleTransDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TRANSITION' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransDeclAccess().getTRANSITIONKeyword_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTransDeclAccess().getDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0_0()); 
	    }
		lv_definitionOrCommand_1_0=ruleDefinitionOrCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransDeclRule());
	        }
       		add(
       			$current, 
       			"definitionOrCommand",
        		lv_definitionOrCommand_1_0, 
        		"DefinitionOrCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransDeclAccess().getSemicolonKeyword_1_1());
    }
)?)+)
;





// Entry rule entryRuleVarDecls
entryRuleVarDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclsRule()); }
	 iv_ruleVarDecls=ruleVarDecls 
	 { $current=$iv_ruleVarDecls.current; } 
	 EOF 
;

// Rule VarDecls
ruleVarDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclsAccess().getVarDeclVarDeclParserRuleCall_0_0()); 
	    }
		lv_varDecl_0_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclsRule());
	        }
       		add(
       			$current, 
       			"varDecl",
        		lv_varDecl_0_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDeclsAccess().getCommaKeyword_1());
    }
)?)+
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_var_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_var_0_0, grammarAccess.getVarDeclAccess().getVarIDENTIFIERSTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"IDENTIFIERS");
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDeclAccess().getCommaKeyword_0_1());
    }
)?)+	otherlv_2=': ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarDeclAccess().getColonSpaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefinitions
entryRuleDefinitions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionsRule()); }
	 iv_ruleDefinitions=ruleDefinitions 
	 { $current=$iv_ruleDefinitions.current; } 
	 EOF 
;

// Rule Definitions
ruleDefinitions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionsAccess().getDefinitionDefinitionParserRuleCall_0_0()); 
	    }
		lv_definition_0_0=ruleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionsRule());
	        }
       		add(
       			$current, 
       			"definition",
        		lv_definition_0_0, 
        		"Definition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionsAccess().getSemicolonKeyword_1());
    }
)?)+
;





// Entry rule entryRuleDefinitionOrCommand
entryRuleDefinitionOrCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionOrCommandRule()); }
	 iv_ruleDefinitionOrCommand=ruleDefinitionOrCommand 
	 { $current=$iv_ruleDefinitionOrCommand.current; } 
	 EOF 
;

// Rule DefinitionOrCommand
ruleDefinitionOrCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDefinitionOrCommandAccess().getDefinitionParserRuleCall_0()); 
    }
    this_Definition_0=ruleDefinition
    { 
        $current = $this_Definition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefinitionOrCommandAccess().getLeftSquareBracketKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getDefinitionOrCommandAccess().getSomeCommandsParserRuleCall_1_1()); 
    }
    this_SomeCommands_2=ruleSomeCommands
    { 
        $current = $this_SomeCommands_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionOrCommandAccess().getRightSquareBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getDefinitionAccess().getSimpleDefinitionParserRuleCall()); 
    }
    this_SimpleDefinition_0=ruleSimpleDefinition
    { 
        $current = $this_SimpleDefinition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSimpleDefinition
entryRuleSimpleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleDefinitionRule()); }
	 iv_ruleSimpleDefinition=ruleSimpleDefinition 
	 { $current=$iv_ruleSimpleDefinition.current; } 
	 EOF 
;

// Rule SimpleDefinition
ruleSimpleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleDefinitionAccess().getLhsLhsParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleLhs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleDefinitionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"Lhs");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleDefinitionAccess().getRhsDefinitionRhsDefinitionParserRuleCall_1_0()); 
	    }
		lv_RhsDefinition_1_0=ruleRhsDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleDefinitionRule());
	        }
       		set(
       			$current, 
       			"RhsDefinition",
        		lv_RhsDefinition_1_0, 
        		"RhsDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLhs
entryRuleLhs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLhsRule()); }
	 iv_ruleLhs=ruleLhs 
	 { $current=$iv_ruleLhs.current; } 
	 EOF 
;

// Rule Lhs
ruleLhs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getLhsAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLhsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)(	otherlv_1='\'' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLhsAccess().getApostropheKeyword_1());
    }
)?)
;





// Entry rule entryRuleRhsDefinition
entryRuleRhsDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRhsDefinitionRule()); }
	 iv_ruleRhsDefinition=ruleRhsDefinition 
	 { $current=$iv_ruleRhsDefinition.current; } 
	 EOF 
;

// Rule RhsDefinition
ruleRhsDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getRhsDefinitionAccess().getRhsExpressionParserRuleCall()); 
    }
    this_RhsExpression_0=ruleRhsExpression
    { 
        $current = $this_RhsExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRhsExpression
entryRuleRhsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRhsExpressionRule()); }
	 iv_ruleRhsExpression=ruleRhsExpression 
	 { $current=$iv_ruleRhsExpression.current; } 
	 EOF 
;

// Rule RhsExpression
ruleRhsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRhsExpressionAccess().getEqualsSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRhsExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRhsExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSomeCommands
entryRuleSomeCommands returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSomeCommandsRule()); }
	 iv_ruleSomeCommands=ruleSomeCommands 
	 { $current=$iv_ruleSomeCommands.current; } 
	 EOF 
;

// Rule SomeCommands
ruleSomeCommands returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSomeCommandsAccess().getFirstSomeCommandSomeCommandParserRuleCall_0_0()); 
	    }
		lv_firstSomeCommand_0_0=ruleSomeCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeCommandsRule());
	        }
       		set(
       			$current, 
       			"firstSomeCommand",
        		lv_firstSomeCommand_0_0, 
        		"SomeCommand");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[]' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSomeCommandsAccess().getLeftSquareBracketRightSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSomeCommandsAccess().getNextSomeCommandSomeCommandParserRuleCall_1_1_0()); 
	    }
		lv_nextSomeCommand_2_0=ruleSomeCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeCommandsRule());
	        }
       		add(
       			$current, 
       			"nextSomeCommand",
        		lv_nextSomeCommand_2_0, 
        		"SomeCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_3='[]' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSomeCommandsAccess().getLeftSquareBracketRightSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSomeCommandsAccess().getElseCommandElseCommandParserRuleCall_2_1_0()); 
	    }
		lv_elseCommand_4_0=ruleElseCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSomeCommandsRule());
	        }
       		set(
       			$current, 
       			"elseCommand",
        		lv_elseCommand_4_0, 
        		"ElseCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSomeCommand
entryRuleSomeCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSomeCommandRule()); }
	 iv_ruleSomeCommand=ruleSomeCommand 
	 { $current=$iv_ruleSomeCommand.current; } 
	 EOF 
;

// Rule SomeCommand
ruleSomeCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSomeCommandAccess().getNamedCommandParserRuleCall()); 
    }
    this_NamedCommand_0=ruleNamedCommand
    { 
        $current = $this_NamedCommand_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNamedCommand
entryRuleNamedCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedCommandRule()); }
	 iv_ruleNamedCommand=ruleNamedCommand 
	 { $current=$iv_ruleNamedCommand.current; } 
	 EOF 
;

// Rule NamedCommand
ruleNamedCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getNamedCommandAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1=': ' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedCommandAccess().getColonSpaceKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedCommandAccess().getGuardedCommandGuardedCommandParserRuleCall_1_0()); 
	    }
		lv_guardedCommand_2_0=ruleGuardedCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedCommandRule());
	        }
       		set(
       			$current, 
       			"guardedCommand",
        		lv_guardedCommand_2_0, 
        		"GuardedCommand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGuardedCommand
entryRuleGuardedCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardedCommandRule()); }
	 iv_ruleGuardedCommand=ruleGuardedCommand 
	 { $current=$iv_ruleGuardedCommand.current; } 
	 EOF 
;

// Rule GuardedCommand
ruleGuardedCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGuardedCommandAccess().getGuardGuardParserRuleCall_0_0()); 
	    }
		lv_guard_0_0=ruleGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardedCommandRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_0_0, 
        		"Guard");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='-->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGuardedCommandAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGuardedCommandAccess().getAssignmentAssignmentsParserRuleCall_2_0()); 
	    }
		lv_assignment_2_0=ruleAssignments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGuardedCommandRule());
	        }
       		set(
       			$current, 
       			"assignment",
        		lv_assignment_2_0, 
        		"Assignments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGuard
entryRuleGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGuardRule()); }
	 iv_ruleGuard=ruleGuard 
	 { $current=$iv_ruleGuard.current; } 
	 EOF 
;

// Rule Guard
ruleGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGuardAccess().getExpressionParserRuleCall()); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignments
entryRuleAssignments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentsRule()); }
	 iv_ruleAssignments=ruleAssignments 
	 { $current=$iv_ruleAssignments.current; } 
	 EOF 
;

// Rule Assignments
ruleAssignments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentsAccess().getFirstSimpleDefinitionSimpleDefinitionParserRuleCall_0_0()); 
	    }
		lv_firstSimpleDefinition_0_0=ruleSimpleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentsRule());
	        }
       		set(
       			$current, 
       			"firstSimpleDefinition",
        		lv_firstSimpleDefinition_0_0, 
        		"SimpleDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentsAccess().getSemicolonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentsAccess().getNextSimpleDefinitionSimpleDefinitionParserRuleCall_1_1_0()); 
	    }
		lv_nextSimpleDefinition_2_0=ruleSimpleDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentsRule());
	        }
       		add(
       			$current, 
       			"nextSimpleDefinition",
        		lv_nextSimpleDefinition_2_0, 
        		"SimpleDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAssignmentsAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleElseCommand
entryRuleElseCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseCommandRule()); }
	 iv_ruleElseCommand=ruleElseCommand 
	 { $current=$iv_ruleElseCommand.current; } 
	 EOF 
;

// Rule ElseCommand
ruleElseCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getElseCommandAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElseCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElseCommandAccess().getColonKeyword_0_1());
    }
)?	otherlv_2='ELSE -->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElseCommandAccess().getELSEKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseCommandAccess().getAssignmentsAssignmentsParserRuleCall_2_0()); 
	    }
		lv_assignments_3_0=ruleAssignments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseCommandRule());
	        }
       		set(
       			$current, 
       			"assignments",
        		lv_assignments_3_0, 
        		"Assignments");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNameExprParserRuleCall_0()); 
    }
    this_NameExpr_0=ruleNameExpr
    { 
        $current = $this_NameExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNextVariableParserRuleCall_1()); 
    }
    this_NextVariable_1=ruleNextVariable
    { 
        $current = $this_NextVariable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNumeralParserRuleCall_2()); 
    }
    this_Numeral_2=ruleNumeral
    { 
        $current = $this_Numeral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOuterInfixApplicationParserRuleCall_3()); 
    }
    this_OuterInfixApplication_3=ruleOuterInfixApplication
    { 
        $current = $this_OuterInfixApplication_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getBracketedExpressionParserRuleCall_4()); 
    }
    this_BracketedExpression_4=ruleBracketedExpression
    { 
        $current = $this_BracketedExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBracketedExpression
entryRuleBracketedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracketedExpressionRule()); }
	 iv_ruleBracketedExpression=ruleBracketedExpression 
	 { $current=$iv_ruleBracketedExpression.current; } 
	 EOF 
;

// Rule BracketedExpression
ruleBracketedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBracketedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBracketedExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBracketedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBracketedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleOuterInfixApplication
entryRuleOuterInfixApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOuterInfixApplicationRule()); }
	 iv_ruleOuterInfixApplication=ruleOuterInfixApplication 
	 { $current=$iv_ruleOuterInfixApplication.current; } 
	 EOF 
;

// Rule OuterInfixApplication
ruleOuterInfixApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getOuterInfixApplicationAccess().getFirstExpressionApplicationParserRuleCall_0_0_0()); 
	    }
		lv_firstExpression_0_1=ruleApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOuterInfixApplicationRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_0_1, 
        		"Application");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOuterInfixApplicationAccess().getFirstExpressionInfixApplicationParserRuleCall_0_0_1()); 
	    }
		lv_firstExpression_0_2=ruleInfixApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOuterInfixApplicationRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_0_2, 
        		"InfixApplication");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(this_IDENTIFIERS_1=RULE_IDENTIFIERS
    { 
    newLeafNode(this_IDENTIFIERS_1, grammarAccess.getOuterInfixApplicationAccess().getIDENTIFIERSTerminalRuleCall_1_0()); 
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOuterInfixApplicationAccess().getNextExpressionApplicationParserRuleCall_1_1_0_0()); 
	    }
		lv_nextExpression_2_1=ruleApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOuterInfixApplicationRule());
	        }
       		add(
       			$current, 
       			"nextExpression",
        		lv_nextExpression_2_1, 
        		"Application");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOuterInfixApplicationAccess().getNextExpressionInfixApplicationParserRuleCall_1_1_0_1()); 
	    }
		lv_nextExpression_2_2=ruleInfixApplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOuterInfixApplicationRule());
	        }
       		add(
       			$current, 
       			"nextExpression",
        		lv_nextExpression_2_2, 
        		"InfixApplication");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)
;





// Entry rule entryRuleNameExpr
entryRuleNameExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameExprRule()); }
	 iv_ruleNameExpr=ruleNameExpr 
	 { $current=$iv_ruleNameExpr.current; } 
	 EOF 
;

// Rule NameExpr
ruleNameExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNameExprAccess().getNameParserRuleCall()); 
    }
    this_Name_0=ruleName
    { 
        $current = $this_Name_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNextVariable
entryRuleNextVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNextVariableRule()); }
	 iv_ruleNextVariable=ruleNextVariable 
	 { $current=$iv_ruleNextVariable.current; } 
	 EOF 
;

// Rule NextVariable
ruleNextVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getNextVariableAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNextVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNextVariableAccess().getFullStopKeyword_1());
    }
)
;





// Entry rule entryRuleApplication
entryRuleApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplicationRule()); }
	 iv_ruleApplication=ruleApplication 
	 { $current=$iv_ruleApplication.current; } 
	 EOF 
;

// Rule Application
ruleApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getFunctionFunctionParserRuleCall_0_0()); 
	    }
		lv_function_0_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_0_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getApplicationAccess().getArgumentArgumentParserRuleCall_1_0()); 
	    }
		lv_argument_1_0=ruleArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApplicationRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_1_0, 
        		"Argument");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getExpressionNameExprParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleNameExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"NameExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getFirstExpressionNameExprParserRuleCall_0_0_0()); 
	    }
		lv_firstExpression_0_1=ruleNameExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_0_1, 
        		"NameExpr");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getFirstExpressionBracketedExpressionParserRuleCall_0_0_1()); 
	    }
		lv_firstExpression_0_2=ruleBracketedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_0_2, 
        		"BracketedExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentAccess().getCommaKeyword_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getNextExpressionNameExprParserRuleCall_1_1_0_0()); 
	    }
		lv_nextExpression_2_1=ruleNameExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		add(
       			$current, 
       			"nextExpression",
        		lv_nextExpression_2_1, 
        		"NameExpr");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentAccess().getNextExpressionBracketedExpressionParserRuleCall_1_1_0_1()); 
	    }
		lv_nextExpression_2_2=ruleBracketedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentRule());
	        }
       		add(
       			$current, 
       			"nextExpression",
        		lv_nextExpression_2_2, 
        		"BracketedExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)
;





// Entry rule entryRuleInfixApplication
entryRuleInfixApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInfixApplicationRule()); }
	 iv_ruleInfixApplication=ruleInfixApplication 
	 { $current=$iv_ruleInfixApplication.current; } 
	 EOF 
;

// Rule InfixApplication
ruleInfixApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInfixApplicationAccess().getFirstExpressionNameExprParserRuleCall_0_0()); 
	    }
		lv_firstExpression_0_0=ruleNameExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixApplicationRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_0_0, 
        		"NameExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInfixApplicationAccess().getEqualsSignKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfixApplicationAccess().getSecondExpressionNameExprParserRuleCall_2_0_0()); 
	    }
		lv_secondExpression_2_1=ruleNameExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixApplicationRule());
	        }
       		set(
       			$current, 
       			"secondExpression",
        		lv_secondExpression_2_1, 
        		"NameExpr");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInfixApplicationAccess().getSecondExpressionNumeralParserRuleCall_2_0_1()); 
	    }
		lv_secondExpression_2_2=ruleNumeral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixApplicationRule());
	        }
       		set(
       			$current, 
       			"secondExpression",
        		lv_secondExpression_2_2, 
        		"Numeral");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInfixApplicationAccess().getSecondExpressionBracketedExpressionParserRuleCall_2_0_2()); 
	    }
		lv_secondExpression_2_3=ruleBracketedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixApplicationRule());
	        }
       		set(
       			$current, 
       			"secondExpression",
        		lv_secondExpression_2_3, 
        		"BracketedExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleName
entryRuleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_identifier_0_0=RULE_IDENTIFIERS
		{
			newLeafNode(lv_identifier_0_0, grammarAccess.getNameAccess().getIdentifierIDENTIFIERSTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"identifier",
        		lv_identifier_0_0, 
        		"IDENTIFIERS");
	    }

)
)
;





// Entry rule entryRuleNumeral
entryRuleNumeral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumeralRule()); }
	 iv_ruleNumeral=ruleNumeral 
	 { $current=$iv_ruleNumeral.current; } 
	 EOF 
;

// Rule Numeral
ruleNumeral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_number_0_0=RULE_NUMERALS
		{
			newLeafNode(lv_number_0_0, grammarAccess.getNumeralAccess().getNumberNUMERALSTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumeralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"number",
        		lv_number_0_0, 
        		"NUMERALS");
	    }

)
)
;





RULE_IDENTIFIERS : (('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'?'|'_')*|('+'|'-'|'*'|'/'|'=')+);

RULE_NUMERALS : ('0'..'9')+;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


