/*
* generated by Xtext
*/

package org.be.textbe.bt2sal2.xtext.sal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cCONTEXTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContextBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextBodyContextBodyParserRuleCall_2_0 = (RuleCall)cContextBodyAssignment_2.eContents().get(0);
		
		//Context:
		//
		//	identifier=IDENTIFIERS ": CONTEXT =" contextBody=ContextBody;
		public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIERS ": CONTEXT =" contextBody=ContextBody
		public Group getGroup() { return cGroup; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0; }

		//": CONTEXT ="
		public Keyword getCONTEXTKeyword_1() { return cCONTEXTKeyword_1; }

		//contextBody=ContextBody
		public Assignment getContextBodyAssignment_2() { return cContextBodyAssignment_2; }

		//ContextBody
		public RuleCall getContextBodyContextBodyParserRuleCall_2_0() { return cContextBodyContextBodyParserRuleCall_2_0; }
	}

	public class ContextBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationsParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContextBody:
		//
		//	"BEGIN" declarations=Declarations "END";
		public ParserRule getRule() { return rule; }

		//"BEGIN" declarations=Declarations "END"
		public Group getGroup() { return cGroup; }

		//"BEGIN"
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }

		//declarations=Declarations
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//Declarations
		public RuleCall getDeclarationsDeclarationsParserRuleCall_1_0() { return cDeclarationsDeclarationsParserRuleCall_1_0; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class DeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Declarations:
		//
		//	(declaration+=Declaration ";")+;
		public ParserRule getRule() { return rule; }

		//(declaration+=Declaration ";")+
		public Group getGroup() { return cGroup; }

		//declaration+=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModuleDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//
		//	TypeDeclaration | ModuleDeclaration;
		public ParserRule getRule() { return rule; }

		//TypeDeclaration | ModuleDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_0() { return cTypeDeclarationParserRuleCall_0; }

		//ModuleDeclaration
		public RuleCall getModuleDeclarationParserRuleCall_1() { return cModuleDeclarationParserRuleCall_1; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cTYPEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeDefAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeDefTypeDefParserRuleCall_2_1_0 = (RuleCall)cTypeDefAssignment_2_1.eContents().get(0);
		
		////Type
		//
		//TypeDeclaration:
		//
		//	identifier=IDENTIFIERS ": TYPE" ("=" typeDef=TypeDef)?;
		public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIERS ": TYPE" ("=" typeDef=TypeDef)?
		public Group getGroup() { return cGroup; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0; }

		//": TYPE"
		public Keyword getTYPEKeyword_1() { return cTYPEKeyword_1; }

		//("=" typeDef=TypeDef)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//typeDef=TypeDef
		public Assignment getTypeDefAssignment_2_1() { return cTypeDefAssignment_2_1; }

		//TypeDef
		public RuleCall getTypeDefTypeDefParserRuleCall_2_1_0() { return cTypeDefTypeDefParserRuleCall_2_1_0; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScalarTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeDef:
		//
		//	Type | ScalarType;
		public ParserRule getRule() { return rule; }

		//Type | ScalarType
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//ScalarType
		public RuleCall getScalarTypeParserRuleCall_1() { return cScalarTypeParserRuleCall_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubrangeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Type: //{Type} 
		//
		//	BasicType | Name | QualifiedName | Subrange;
		public ParserRule getRule() { return rule; }

		////{Type} 
		//
		//BasicType | Name | QualifiedName | Subrange
		public Alternatives getAlternatives() { return cAlternatives; }

		////{Type} 
		//
		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//Name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_2() { return cQualifiedNameParserRuleCall_2; }

		//Subrange
		public RuleCall getSubrangeParserRuleCall_3() { return cSubrangeParserRuleCall_3; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeBOOLEANKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//BasicType:
		//
		//	type="BOOLEAN";
		public ParserRule getRule() { return rule; }

		//type="BOOLEAN"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"BOOLEAN"
		public Keyword getTypeBOOLEANKeyword_0() { return cTypeBOOLEANKeyword_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifier1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifier1IDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cIdentifier1Assignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActualParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActualParametersActualParametersParserRuleCall_2_0 = (RuleCall)cActualParametersAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIdentifier2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIdentifier2IDENTIFIERSTerminalRuleCall_5_0 = (RuleCall)cIdentifier2Assignment_5.eContents().get(0);
		
		//QualifiedName:
		//
		//	identifier1=IDENTIFIERS "{" actualParameters=ActualParameters? "}" "!" identifier2=IDENTIFIERS;
		public ParserRule getRule() { return rule; }

		//identifier1=IDENTIFIERS "{" actualParameters=ActualParameters? "}" "!" identifier2=IDENTIFIERS
		public Group getGroup() { return cGroup; }

		//identifier1=IDENTIFIERS
		public Assignment getIdentifier1Assignment_0() { return cIdentifier1Assignment_0; }

		//IDENTIFIERS
		public RuleCall getIdentifier1IDENTIFIERSTerminalRuleCall_0_0() { return cIdentifier1IDENTIFIERSTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//actualParameters=ActualParameters?
		public Assignment getActualParametersAssignment_2() { return cActualParametersAssignment_2; }

		//ActualParameters
		public RuleCall getActualParametersActualParametersParserRuleCall_2_0() { return cActualParametersActualParametersParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//"!"
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }

		//identifier2=IDENTIFIERS
		public Assignment getIdentifier2Assignment_5() { return cIdentifier2Assignment_5; }

		//IDENTIFIERS
		public RuleCall getIdentifier2IDENTIFIERSTerminalRuleCall_5_0() { return cIdentifier2IDENTIFIERSTerminalRuleCall_5_0; }
	}

	public class ActualParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActualParameters");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ActualParameters: //Something else
		//
		//	Type;
		public ParserRule getRule() { return rule; }

		////Something else
		//
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}

	public class SubrangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subrange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundBoundParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundBoundParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Subrange:
		//
		//	"[" lowerBound=Bound ".." upperBound=Bound "]";
		public ParserRule getRule() { return rule; }

		//"[" lowerBound=Bound ".." upperBound=Bound "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=Bound
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//Bound
		public RuleCall getLowerBoundBoundParserRuleCall_1_0() { return cLowerBoundBoundParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//upperBound=Bound
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//Bound
		public RuleCall getUpperBoundBoundParserRuleCall_3_0() { return cUpperBoundBoundParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bound");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Bound:
		//
		//	Expression;
		public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class ScalarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScalarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstTypeIDENTIFIERSTerminalRuleCall_1_0 = (RuleCall)cFirstTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextTypeIDENTIFIERSTerminalRuleCall_2_1_0 = (RuleCall)cNextTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ScalarType:
		//
		//	"{" firstType=IDENTIFIERS ("," nextType+=IDENTIFIERS)* "}";
		public ParserRule getRule() { return rule; }

		//"{" firstType=IDENTIFIERS ("," nextType+=IDENTIFIERS)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//firstType=IDENTIFIERS
		public Assignment getFirstTypeAssignment_1() { return cFirstTypeAssignment_1; }

		//IDENTIFIERS
		public RuleCall getFirstTypeIDENTIFIERSTerminalRuleCall_1_0() { return cFirstTypeIDENTIFIERSTerminalRuleCall_1_0; }

		//("," nextType+=IDENTIFIERS)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//nextType+=IDENTIFIERS
		public Assignment getNextTypeAssignment_2_1() { return cNextTypeAssignment_2_1; }

		//IDENTIFIERS
		public RuleCall getNextTypeIDENTIFIERSTerminalRuleCall_2_1_0() { return cNextTypeIDENTIFIERSTerminalRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ModuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cMODULEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModuleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModuleModuleParserRuleCall_2_0 = (RuleCall)cModuleAssignment_2.eContents().get(0);
		
		////Module
		//
		//ModuleDeclaration:
		//
		//	identifier=IDENTIFIERS ": MODULE =" module=Module;
		public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIERS ": MODULE =" module=Module
		public Group getGroup() { return cGroup; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0; }

		//": MODULE ="
		public Keyword getMODULEKeyword_1() { return cMODULEKeyword_1; }

		//module=Module
		public Assignment getModuleAssignment_2() { return cModuleAssignment_2; }

		//Module
		public RuleCall getModuleModuleParserRuleCall_2_0() { return cModuleModuleParserRuleCall_2_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final RuleCall cBaseModuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Module:
		//
		//	BaseModule;
		public ParserRule getRule() { return rule; }

		//BaseModule
		public RuleCall getBaseModuleParserRuleCall() { return cBaseModuleParserRuleCall; }
	}

	public class BaseModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBEGINKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBaseDeclarationsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cENDKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BaseModule:
		//
		//	"BEGIN" BaseDeclarations "END";
		public ParserRule getRule() { return rule; }

		//"BEGIN" BaseDeclarations "END"
		public Group getGroup() { return cGroup; }

		//"BEGIN"
		public Keyword getBEGINKeyword_0() { return cBEGINKeyword_0; }

		//BaseDeclarations
		public RuleCall getBaseDeclarationsParserRuleCall_1() { return cBaseDeclarationsParserRuleCall_1; }

		//"END"
		public Keyword getENDKeyword_2() { return cENDKeyword_2; }
	}

	public class BaseDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseDeclarations");
		private final Assignment cBaseDeclarationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBaseDeclarationBaseDeclarationParserRuleCall_0 = (RuleCall)cBaseDeclarationAssignment.eContents().get(0);
		
		//BaseDeclarations:
		//
		//	baseDeclaration+=BaseDeclaration*;
		public ParserRule getRule() { return rule; }

		//baseDeclaration+=BaseDeclaration*
		public Assignment getBaseDeclarationAssignment() { return cBaseDeclarationAssignment; }

		//BaseDeclaration
		public RuleCall getBaseDeclarationBaseDeclarationParserRuleCall_0() { return cBaseDeclarationBaseDeclarationParserRuleCall_0; }
	}

	public class BaseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocalDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefDeclParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInitDeclParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTransDeclParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BaseDeclaration:
		//
		//	InputDecl | OutputDecl | LocalDecl | DefDecl | InitDecl | TransDecl;
		public ParserRule getRule() { return rule; }

		//InputDecl | OutputDecl | LocalDecl | DefDecl | InitDecl | TransDecl
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputDecl
		public RuleCall getInputDeclParserRuleCall_0() { return cInputDeclParserRuleCall_0; }

		//OutputDecl
		public RuleCall getOutputDeclParserRuleCall_1() { return cOutputDeclParserRuleCall_1; }

		//LocalDecl
		public RuleCall getLocalDeclParserRuleCall_2() { return cLocalDeclParserRuleCall_2; }

		//DefDecl
		public RuleCall getDefDeclParserRuleCall_3() { return cDefDeclParserRuleCall_3; }

		//InitDecl
		public RuleCall getInitDeclParserRuleCall_4() { return cInitDeclParserRuleCall_4; }

		//TransDecl
		public RuleCall getTransDeclParserRuleCall_5() { return cTransDeclParserRuleCall_5; }
	}

	public class InputDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINPUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclsVarDeclsParserRuleCall_1_0 = (RuleCall)cVarDeclsAssignment_1.eContents().get(0);
		
		////Declaration Blocks
		//
		//InputDecl:
		//
		//	"INPUT" varDecls=VarDecls;
		public ParserRule getRule() { return rule; }

		//"INPUT" varDecls=VarDecls
		public Group getGroup() { return cGroup; }

		//"INPUT"
		public Keyword getINPUTKeyword_0() { return cINPUTKeyword_0; }

		//varDecls=VarDecls
		public Assignment getVarDeclsAssignment_1() { return cVarDeclsAssignment_1; }

		//VarDecls
		public RuleCall getVarDeclsVarDeclsParserRuleCall_1_0() { return cVarDeclsVarDeclsParserRuleCall_1_0; }
	}

	public class OutputDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOUTPUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclsVarDeclsParserRuleCall_1_0 = (RuleCall)cVarDeclsAssignment_1.eContents().get(0);
		
		//OutputDecl:
		//
		//	"OUTPUT" varDecls=VarDecls;
		public ParserRule getRule() { return rule; }

		//"OUTPUT" varDecls=VarDecls
		public Group getGroup() { return cGroup; }

		//"OUTPUT"
		public Keyword getOUTPUTKeyword_0() { return cOUTPUTKeyword_0; }

		//varDecls=VarDecls
		public Assignment getVarDeclsAssignment_1() { return cVarDeclsAssignment_1; }

		//VarDecls
		public RuleCall getVarDeclsVarDeclsParserRuleCall_1_0() { return cVarDeclsVarDeclsParserRuleCall_1_0; }
	}

	public class LocalDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLOCALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarDeclsVarDeclsParserRuleCall_1_0 = (RuleCall)cVarDeclsAssignment_1.eContents().get(0);
		
		//LocalDecl:
		//
		//	"LOCAL" varDecls=VarDecls;
		public ParserRule getRule() { return rule; }

		//"LOCAL" varDecls=VarDecls
		public Group getGroup() { return cGroup; }

		//"LOCAL"
		public Keyword getLOCALKeyword_0() { return cLOCALKeyword_0; }

		//varDecls=VarDecls
		public Assignment getVarDeclsAssignment_1() { return cVarDeclsAssignment_1; }

		//VarDecls
		public RuleCall getVarDeclsVarDeclsParserRuleCall_1_0() { return cVarDeclsVarDeclsParserRuleCall_1_0; }
	}

	public class DefDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFINITIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionsDefinitionsParserRuleCall_1_0 = (RuleCall)cDefinitionsAssignment_1.eContents().get(0);
		
		//DefDecl:
		//
		//	"DEFINITION" definitions=Definitions;
		public ParserRule getRule() { return rule; }

		//"DEFINITION" definitions=Definitions
		public Group getGroup() { return cGroup; }

		//"DEFINITION"
		public Keyword getDEFINITIONKeyword_0() { return cDEFINITIONKeyword_0; }

		//definitions=Definitions
		public Assignment getDefinitionsAssignment_1() { return cDefinitionsAssignment_1; }

		//Definitions
		public RuleCall getDefinitionsDefinitionsParserRuleCall_1_0() { return cDefinitionsDefinitionsParserRuleCall_1_0; }
	}

	public class InitDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINITIALIZATIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstDefinitionOrCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0 = (RuleCall)cFirstDefinitionOrCommandAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextDefinitionOrCommandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextDefinitionOrCommandDefinitionOrCommandParserRuleCall_2_1_0 = (RuleCall)cNextDefinitionOrCommandAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InitDecl:
		//
		//	"INITIALIZATION" firstDefinitionOrCommand=DefinitionOrCommand (";" nextDefinitionOrCommand+=DefinitionOrCommand)*
		//
		//	";"?;
		public ParserRule getRule() { return rule; }

		//"INITIALIZATION" firstDefinitionOrCommand=DefinitionOrCommand (";" nextDefinitionOrCommand+=DefinitionOrCommand)* ";"?
		public Group getGroup() { return cGroup; }

		//"INITIALIZATION"
		public Keyword getINITIALIZATIONKeyword_0() { return cINITIALIZATIONKeyword_0; }

		//firstDefinitionOrCommand=DefinitionOrCommand
		public Assignment getFirstDefinitionOrCommandAssignment_1() { return cFirstDefinitionOrCommandAssignment_1; }

		//DefinitionOrCommand
		public RuleCall getFirstDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0() { return cFirstDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0; }

		//(";" nextDefinitionOrCommand+=DefinitionOrCommand)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//nextDefinitionOrCommand+=DefinitionOrCommand
		public Assignment getNextDefinitionOrCommandAssignment_2_1() { return cNextDefinitionOrCommandAssignment_2_1; }

		//DefinitionOrCommand
		public RuleCall getNextDefinitionOrCommandDefinitionOrCommandParserRuleCall_2_1_0() { return cNextDefinitionOrCommandDefinitionOrCommandParserRuleCall_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class TransDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRANSITIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstDefinitionOrCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0 = (RuleCall)cFirstDefinitionOrCommandAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNextDefinitionOrCommandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNextDefinitionOrCommandDefinitionOrCommandParserRuleCall_2_1_0 = (RuleCall)cNextDefinitionOrCommandAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TransDecl:
		//
		//	"TRANSITION" firstDefinitionOrCommand=DefinitionOrCommand (";" nextDefinitionOrCommand+=DefinitionOrCommand)* ";"?;
		public ParserRule getRule() { return rule; }

		//"TRANSITION" firstDefinitionOrCommand=DefinitionOrCommand (";" nextDefinitionOrCommand+=DefinitionOrCommand)* ";"?
		public Group getGroup() { return cGroup; }

		//"TRANSITION"
		public Keyword getTRANSITIONKeyword_0() { return cTRANSITIONKeyword_0; }

		//firstDefinitionOrCommand=DefinitionOrCommand
		public Assignment getFirstDefinitionOrCommandAssignment_1() { return cFirstDefinitionOrCommandAssignment_1; }

		//DefinitionOrCommand
		public RuleCall getFirstDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0() { return cFirstDefinitionOrCommandDefinitionOrCommandParserRuleCall_1_0; }

		//(";" nextDefinitionOrCommand+=DefinitionOrCommand)*
		public Group getGroup_2() { return cGroup_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//nextDefinitionOrCommand+=DefinitionOrCommand
		public Assignment getNextDefinitionOrCommandAssignment_2_1() { return cNextDefinitionOrCommandAssignment_2_1; }

		//DefinitionOrCommand
		public RuleCall getNextDefinitionOrCommandDefinitionOrCommandParserRuleCall_2_1_0() { return cNextDefinitionOrCommandDefinitionOrCommandParserRuleCall_2_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VarDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstVarDeclAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstVarDeclVarDeclParserRuleCall_0_0 = (RuleCall)cFirstVarDeclAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextVarDeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextVarDeclVarDeclParserRuleCall_1_1_0 = (RuleCall)cNextVarDeclAssignment_1_1.eContents().get(0);
		
		////Declaration
		//
		//VarDecls:
		//
		//	firstVarDecl=VarDecl ("," nextVarDecl+=VarDecl)*;
		public ParserRule getRule() { return rule; }

		//firstVarDecl=VarDecl ("," nextVarDecl+=VarDecl)*
		public Group getGroup() { return cGroup; }

		//firstVarDecl=VarDecl
		public Assignment getFirstVarDeclAssignment_0() { return cFirstVarDeclAssignment_0; }

		//VarDecl
		public RuleCall getFirstVarDeclVarDeclParserRuleCall_0_0() { return cFirstVarDeclVarDeclParserRuleCall_0_0; }

		//("," nextVarDecl+=VarDecl)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nextVarDecl+=VarDecl
		public Assignment getNextVarDeclAssignment_1_1() { return cNextVarDeclAssignment_1_1; }

		//VarDecl
		public RuleCall getNextVarDeclVarDeclParserRuleCall_1_1_0() { return cNextVarDeclVarDeclParserRuleCall_1_1_0; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstVarIDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cFirstVarAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextVarAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextVarIDENTIFIERSTerminalRuleCall_1_1_0 = (RuleCall)cNextVarAssignment_1_1.eContents().get(0);
		private final Keyword cColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VarDecl:
		//
		//	firstVar=IDENTIFIERS ("," nextVar+=IDENTIFIERS)* ": " type=Type;
		public ParserRule getRule() { return rule; }

		//firstVar=IDENTIFIERS ("," nextVar+=IDENTIFIERS)* ": " type=Type
		public Group getGroup() { return cGroup; }

		//firstVar=IDENTIFIERS
		public Assignment getFirstVarAssignment_0() { return cFirstVarAssignment_0; }

		//IDENTIFIERS
		public RuleCall getFirstVarIDENTIFIERSTerminalRuleCall_0_0() { return cFirstVarIDENTIFIERSTerminalRuleCall_0_0; }

		//("," nextVar+=IDENTIFIERS)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nextVar+=IDENTIFIERS
		public Assignment getNextVarAssignment_1_1() { return cNextVarAssignment_1_1; }

		//IDENTIFIERS
		public RuleCall getNextVarIDENTIFIERSTerminalRuleCall_1_1_0() { return cNextVarIDENTIFIERSTerminalRuleCall_1_1_0; }

		//": "
		public Keyword getColonSpaceKeyword_2() { return cColonSpaceKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}

	public class DefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstDefinitionDefinitionParserRuleCall_0_0 = (RuleCall)cFirstDefinitionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextDefinitionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextDefinitionDefinitionParserRuleCall_1_1_0 = (RuleCall)cNextDefinitionAssignment_1_1.eContents().get(0);
		
		//Definitions:
		//
		//	firstDefinition=Definition (";" nextDefinition+=Definition)*;
		public ParserRule getRule() { return rule; }

		//firstDefinition=Definition (";" nextDefinition+=Definition)*
		public Group getGroup() { return cGroup; }

		//firstDefinition=Definition
		public Assignment getFirstDefinitionAssignment_0() { return cFirstDefinitionAssignment_0; }

		//Definition
		public RuleCall getFirstDefinitionDefinitionParserRuleCall_0_0() { return cFirstDefinitionDefinitionParserRuleCall_0_0; }

		//(";" nextDefinition+=Definition)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//nextDefinition+=Definition
		public Assignment getNextDefinitionAssignment_1_1() { return cNextDefinitionAssignment_1_1; }

		//Definition
		public RuleCall getNextDefinitionDefinitionParserRuleCall_1_1_0() { return cNextDefinitionDefinitionParserRuleCall_1_1_0; }
	}

	public class DefinitionOrCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionOrCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSomeCommandsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//DefinitionOrCommand:
		//
		//	Definition | "[" SomeCommands "]";
		public ParserRule getRule() { return rule; }

		//Definition | "[" SomeCommands "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }

		//"[" SomeCommands "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//SomeCommands
		public RuleCall getSomeCommandsParserRuleCall_1_1() { return cSomeCommandsParserRuleCall_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final RuleCall cSimpleDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Definition:
		//
		//	SimpleDefinition;
		public ParserRule getRule() { return rule; }

		//SimpleDefinition
		public RuleCall getSimpleDefinitionParserRuleCall() { return cSimpleDefinitionParserRuleCall; }
	}

	public class SimpleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsLhsParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Assignment cRhsDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRhsDefinitionRhsDefinitionParserRuleCall_1_0 = (RuleCall)cRhsDefinitionAssignment_1.eContents().get(0);
		
		//SimpleDefinition:
		//
		//	lhs=Lhs RhsDefinition=RhsDefinition;
		public ParserRule getRule() { return rule; }

		//lhs=Lhs RhsDefinition=RhsDefinition
		public Group getGroup() { return cGroup; }

		//lhs=Lhs
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }

		//Lhs
		public RuleCall getLhsLhsParserRuleCall_0_0() { return cLhsLhsParserRuleCall_0_0; }

		//RhsDefinition=RhsDefinition
		public Assignment getRhsDefinitionAssignment_1() { return cRhsDefinitionAssignment_1; }

		//RhsDefinition
		public RuleCall getRhsDefinitionRhsDefinitionParserRuleCall_1_0() { return cRhsDefinitionRhsDefinitionParserRuleCall_1_0; }
	}

	public class LhsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lhs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Lhs:
		//
		//	identifier=IDENTIFIERS "\'"?;
		public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIERS "\'"?
		public Group getGroup() { return cGroup; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0; }

		//"\'"?
		public Keyword getApostropheKeyword_1() { return cApostropheKeyword_1; }
	}

	public class RhsDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RhsDefinition");
		private final RuleCall cRhsExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RhsDefinition:
		//
		//	RhsExpression;
		public ParserRule getRule() { return rule; }

		//RhsExpression
		public RuleCall getRhsExpressionParserRuleCall() { return cRhsExpressionParserRuleCall; }
	}

	public class RhsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RhsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//RhsExpression:
		//
		//	"=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//"=" expression=Expression
		public Group getGroup() { return cGroup; }

		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class SomeCommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeCommands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstSomeCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstSomeCommandSomeCommandParserRuleCall_0_0 = (RuleCall)cFirstSomeCommandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextSomeCommandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextSomeCommandSomeCommandParserRuleCall_1_1_0 = (RuleCall)cNextSomeCommandAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseCommandAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseCommandElseCommandParserRuleCall_2_1_0 = (RuleCall)cElseCommandAssignment_2_1.eContents().get(0);
		
		//SomeCommands:
		//
		//	firstSomeCommand=SomeCommand ("[]" nextSomeCommand+=SomeCommand)* ("[]" elseCommand=ElseCommand)?;
		public ParserRule getRule() { return rule; }

		//firstSomeCommand=SomeCommand ("[]" nextSomeCommand+=SomeCommand)* ("[]" elseCommand=ElseCommand)?
		public Group getGroup() { return cGroup; }

		//firstSomeCommand=SomeCommand
		public Assignment getFirstSomeCommandAssignment_0() { return cFirstSomeCommandAssignment_0; }

		//SomeCommand
		public RuleCall getFirstSomeCommandSomeCommandParserRuleCall_0_0() { return cFirstSomeCommandSomeCommandParserRuleCall_0_0; }

		//("[]" nextSomeCommand+=SomeCommand)*
		public Group getGroup_1() { return cGroup_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_0() { return cLeftSquareBracketRightSquareBracketKeyword_1_0; }

		//nextSomeCommand+=SomeCommand
		public Assignment getNextSomeCommandAssignment_1_1() { return cNextSomeCommandAssignment_1_1; }

		//SomeCommand
		public RuleCall getNextSomeCommandSomeCommandParserRuleCall_1_1_0() { return cNextSomeCommandSomeCommandParserRuleCall_1_1_0; }

		//("[]" elseCommand=ElseCommand)?
		public Group getGroup_2() { return cGroup_2; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2_0() { return cLeftSquareBracketRightSquareBracketKeyword_2_0; }

		//elseCommand=ElseCommand
		public Assignment getElseCommandAssignment_2_1() { return cElseCommandAssignment_2_1; }

		//ElseCommand
		public RuleCall getElseCommandElseCommandParserRuleCall_2_1_0() { return cElseCommandElseCommandParserRuleCall_2_1_0; }
	}

	public class SomeCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SomeCommand");
		private final RuleCall cNamedCommandParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SomeCommand:
		//
		//	NamedCommand;
		public ParserRule getRule() { return rule; }

		//NamedCommand
		public RuleCall getNamedCommandParserRuleCall() { return cNamedCommandParserRuleCall; }
	}

	public class NamedCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cColonSpaceKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cGuardedCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGuardedCommandGuardedCommandParserRuleCall_1_0 = (RuleCall)cGuardedCommandAssignment_1.eContents().get(0);
		
		//NamedCommand:
		//
		//	(identifier=IDENTIFIERS ": ")? guardedCommand=GuardedCommand;
		public ParserRule getRule() { return rule; }

		//(identifier=IDENTIFIERS ": ")? guardedCommand=GuardedCommand
		public Group getGroup() { return cGroup; }

		//(identifier=IDENTIFIERS ": ")?
		public Group getGroup_0() { return cGroup_0; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0_0; }

		//": "
		public Keyword getColonSpaceKeyword_0_1() { return cColonSpaceKeyword_0_1; }

		//guardedCommand=GuardedCommand
		public Assignment getGuardedCommandAssignment_1() { return cGuardedCommandAssignment_1; }

		//GuardedCommand
		public RuleCall getGuardedCommandGuardedCommandParserRuleCall_1_0() { return cGuardedCommandGuardedCommandParserRuleCall_1_0; }
	}

	public class GuardedCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardedCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGuardAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGuardGuardParserRuleCall_0_0 = (RuleCall)cGuardAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentAssignmentsParserRuleCall_2_0 = (RuleCall)cAssignmentAssignment_2.eContents().get(0);
		
		//GuardedCommand:
		//
		//	guard=Guard "-->" assignment=Assignments;
		public ParserRule getRule() { return rule; }

		//guard=Guard "-->" assignment=Assignments
		public Group getGroup() { return cGroup; }

		//guard=Guard
		public Assignment getGuardAssignment_0() { return cGuardAssignment_0; }

		//Guard
		public RuleCall getGuardGuardParserRuleCall_0_0() { return cGuardGuardParserRuleCall_0_0; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_1; }

		//assignment=Assignments
		public Assignment getAssignmentAssignment_2() { return cAssignmentAssignment_2; }

		//Assignments
		public RuleCall getAssignmentAssignmentsParserRuleCall_2_0() { return cAssignmentAssignmentsParserRuleCall_2_0; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Guard:
		//
		//	Expression;
		public ParserRule getRule() { return rule; }

		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class AssignmentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstSimpleDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstSimpleDefinitionSimpleDefinitionParserRuleCall_0_0 = (RuleCall)cFirstSimpleDefinitionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextSimpleDefinitionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNextSimpleDefinitionSimpleDefinitionParserRuleCall_1_1_0 = (RuleCall)cNextSimpleDefinitionAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Assignments:
		//
		//	firstSimpleDefinition=SimpleDefinition? (";" nextSimpleDefinition+=SimpleDefinition)* ";"?;
		public ParserRule getRule() { return rule; }

		//firstSimpleDefinition=SimpleDefinition? (";" nextSimpleDefinition+=SimpleDefinition)* ";"?
		public Group getGroup() { return cGroup; }

		//firstSimpleDefinition=SimpleDefinition?
		public Assignment getFirstSimpleDefinitionAssignment_0() { return cFirstSimpleDefinitionAssignment_0; }

		//SimpleDefinition
		public RuleCall getFirstSimpleDefinitionSimpleDefinitionParserRuleCall_0_0() { return cFirstSimpleDefinitionSimpleDefinitionParserRuleCall_0_0; }

		//(";" nextSimpleDefinition+=SimpleDefinition)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//nextSimpleDefinition+=SimpleDefinition
		public Assignment getNextSimpleDefinitionAssignment_1_1() { return cNextSimpleDefinitionAssignment_1_1; }

		//SimpleDefinition
		public RuleCall getNextSimpleDefinitionSimpleDefinitionParserRuleCall_1_1_0() { return cNextSimpleDefinitionSimpleDefinitionParserRuleCall_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ElseCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cELSEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssignmentsAssignmentsParserRuleCall_2_0 = (RuleCall)cAssignmentsAssignment_2.eContents().get(0);
		
		//ElseCommand:
		//
		//	(identifier=IDENTIFIERS ":")? "ELSE -->" assignments=Assignments;
		public ParserRule getRule() { return rule; }

		//(identifier=IDENTIFIERS ":")? "ELSE -->" assignments=Assignments
		public Group getGroup() { return cGroup; }

		//(identifier=IDENTIFIERS ":")?
		public Group getGroup_0() { return cGroup_0; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//"ELSE -->"
		public Keyword getELSEKeyword_1() { return cELSEKeyword_1; }

		//assignments=Assignments
		public Assignment getAssignmentsAssignment_2() { return cAssignmentsAssignment_2; }

		//Assignments
		public RuleCall getAssignmentsAssignmentsParserRuleCall_2_0() { return cAssignmentsAssignmentsParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNextVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumeralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOuterInfixApplicationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBracketedExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////Expression
		//
		////This rule is reconstructed because Xtext does not support recursive rule
		//
		////Expression:
		//
		////	NameExpr | NextVariable | Numeral | Application | 
		//
		////	InfixApplication | "(" Expression ")"
		//
		////;
		//
		//Expression:
		//
		//	NameExpr //| Application | InfixApplication 
		//
		//	//| "(" Expression ")"
		//
		//	| NextVariable | Numeral | OuterInfixApplication | BracketedExpression;
		public ParserRule getRule() { return rule; }

		//NameExpr //| Application | InfixApplication 
		//
		////| "(" Expression ")"
		//
		//| NextVariable | Numeral | OuterInfixApplication | BracketedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NameExpr
		public RuleCall getNameExprParserRuleCall_0() { return cNameExprParserRuleCall_0; }

		//NextVariable
		public RuleCall getNextVariableParserRuleCall_1() { return cNextVariableParserRuleCall_1; }

		//Numeral
		public RuleCall getNumeralParserRuleCall_2() { return cNumeralParserRuleCall_2; }

		//OuterInfixApplication
		public RuleCall getOuterInfixApplicationParserRuleCall_3() { return cOuterInfixApplicationParserRuleCall_3; }

		//BracketedExpression
		public RuleCall getBracketedExpressionParserRuleCall_4() { return cBracketedExpressionParserRuleCall_4; }
	}

	public class BracketedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracketedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracketedExpression:
		//
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class OuterInfixApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OuterInfixApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cFirstExpressionAlternatives_0_0 = (Alternatives)cFirstExpressionAssignment_0.eContents().get(0);
		private final RuleCall cFirstExpressionApplicationParserRuleCall_0_0_0 = (RuleCall)cFirstExpressionAlternatives_0_0.eContents().get(0);
		private final RuleCall cFirstExpressionInfixApplicationParserRuleCall_0_0_1 = (RuleCall)cFirstExpressionAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNextExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNextExpressionAlternatives_1_1_0 = (Alternatives)cNextExpressionAssignment_1_1.eContents().get(0);
		private final RuleCall cNextExpressionApplicationParserRuleCall_1_1_0_0 = (RuleCall)cNextExpressionAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNextExpressionInfixApplicationParserRuleCall_1_1_0_1 = (RuleCall)cNextExpressionAlternatives_1_1_0.eContents().get(1);
		
		//OuterInfixApplication:
		//
		//	firstExpression=(Application | InfixApplication) (IDENTIFIERS nextExpression+=(Application | InfixApplication))*;
		public ParserRule getRule() { return rule; }

		//firstExpression=(Application | InfixApplication) (IDENTIFIERS nextExpression+=(Application | InfixApplication))*
		public Group getGroup() { return cGroup; }

		//firstExpression=(Application | InfixApplication)
		public Assignment getFirstExpressionAssignment_0() { return cFirstExpressionAssignment_0; }

		//Application | InfixApplication
		public Alternatives getFirstExpressionAlternatives_0_0() { return cFirstExpressionAlternatives_0_0; }

		//Application
		public RuleCall getFirstExpressionApplicationParserRuleCall_0_0_0() { return cFirstExpressionApplicationParserRuleCall_0_0_0; }

		//InfixApplication
		public RuleCall getFirstExpressionInfixApplicationParserRuleCall_0_0_1() { return cFirstExpressionInfixApplicationParserRuleCall_0_0_1; }

		//(IDENTIFIERS nextExpression+=(Application | InfixApplication))*
		public Group getGroup_1() { return cGroup_1; }

		//IDENTIFIERS
		public RuleCall getIDENTIFIERSTerminalRuleCall_1_0() { return cIDENTIFIERSTerminalRuleCall_1_0; }

		//nextExpression+=(Application | InfixApplication)
		public Assignment getNextExpressionAssignment_1_1() { return cNextExpressionAssignment_1_1; }

		//Application | InfixApplication
		public Alternatives getNextExpressionAlternatives_1_1_0() { return cNextExpressionAlternatives_1_1_0; }

		//Application
		public RuleCall getNextExpressionApplicationParserRuleCall_1_1_0_0() { return cNextExpressionApplicationParserRuleCall_1_1_0_0; }

		//InfixApplication
		public RuleCall getNextExpressionInfixApplicationParserRuleCall_1_1_0_1() { return cNextExpressionInfixApplicationParserRuleCall_1_1_0_1; }
	}

	public class NameExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameExpr");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NameExpr:
		//
		//	Name;
		public ParserRule getRule() { return rule; }

		//Name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}

	public class NextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NextVariable:
		//
		//	identifier=IDENTIFIERS ".";
		public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIERS "."
		public Group getGroup() { return cGroup; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cArgumentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentArgumentParserRuleCall_1_0 = (RuleCall)cArgumentAssignment_1.eContents().get(0);
		
		//Application:
		//
		//	function=Function argument=Argument;
		public ParserRule getRule() { return rule; }

		//function=Function argument=Argument
		public Group getGroup() { return cGroup; }

		//function=Function
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//Function
		public RuleCall getFunctionFunctionParserRuleCall_0_0() { return cFunctionFunctionParserRuleCall_0_0; }

		//argument=Argument
		public Assignment getArgumentAssignment_1() { return cArgumentAssignment_1; }

		//Argument
		public RuleCall getArgumentArgumentParserRuleCall_1_0() { return cArgumentArgumentParserRuleCall_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionNameExprParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Function: //expression=[Expression]
		//
		//	expression=NameExpr;
		public ParserRule getRule() { return rule; }

		////expression=[Expression]
		//
		//expression=NameExpr
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//NameExpr
		public RuleCall getExpressionNameExprParserRuleCall_0() { return cExpressionNameExprParserRuleCall_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cFirstExpressionAlternatives_0_0 = (Alternatives)cFirstExpressionAssignment_0.eContents().get(0);
		private final RuleCall cFirstExpressionNameExprParserRuleCall_0_0_0 = (RuleCall)cFirstExpressionAlternatives_0_0.eContents().get(0);
		private final RuleCall cFirstExpressionBracketedExpressionParserRuleCall_0_0_1 = (RuleCall)cFirstExpressionAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNextExpressionAlternatives_1_1_0 = (Alternatives)cNextExpressionAssignment_1_1.eContents().get(0);
		private final RuleCall cNextExpressionNameExprParserRuleCall_1_1_0_0 = (RuleCall)cNextExpressionAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNextExpressionBracketedExpressionParserRuleCall_1_1_0_1 = (RuleCall)cNextExpressionAlternatives_1_1_0.eContents().get(1);
		
		//Argument: //firstExpression=[Expression] ("," nextExpression+=[Expression])*
		//
		//	firstExpression=(NameExpr | BracketedExpression) ("," nextExpression+=(NameExpr | BracketedExpression))*;
		public ParserRule getRule() { return rule; }

		////firstExpression=[Expression] ("," nextExpression+=[Expression])*
		//
		//firstExpression=(NameExpr | BracketedExpression) ("," nextExpression+=(NameExpr | BracketedExpression))*
		public Group getGroup() { return cGroup; }

		////firstExpression=[Expression] ("," nextExpression+=[Expression])*
		//
		//firstExpression=(NameExpr | BracketedExpression)
		public Assignment getFirstExpressionAssignment_0() { return cFirstExpressionAssignment_0; }

		//NameExpr | BracketedExpression
		public Alternatives getFirstExpressionAlternatives_0_0() { return cFirstExpressionAlternatives_0_0; }

		//NameExpr
		public RuleCall getFirstExpressionNameExprParserRuleCall_0_0_0() { return cFirstExpressionNameExprParserRuleCall_0_0_0; }

		//BracketedExpression
		public RuleCall getFirstExpressionBracketedExpressionParserRuleCall_0_0_1() { return cFirstExpressionBracketedExpressionParserRuleCall_0_0_1; }

		//("," nextExpression+=(NameExpr | BracketedExpression))*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//nextExpression+=(NameExpr | BracketedExpression)
		public Assignment getNextExpressionAssignment_1_1() { return cNextExpressionAssignment_1_1; }

		//NameExpr | BracketedExpression
		public Alternatives getNextExpressionAlternatives_1_1_0() { return cNextExpressionAlternatives_1_1_0; }

		//NameExpr
		public RuleCall getNextExpressionNameExprParserRuleCall_1_1_0_0() { return cNextExpressionNameExprParserRuleCall_1_1_0_0; }

		//BracketedExpression
		public RuleCall getNextExpressionBracketedExpressionParserRuleCall_1_1_0_1() { return cNextExpressionBracketedExpressionParserRuleCall_1_1_0_1; }
	}

	public class InfixApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InfixApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstExpressionNameExprParserRuleCall_0_0 = (RuleCall)cFirstExpressionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecondExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cSecondExpressionAlternatives_2_0 = (Alternatives)cSecondExpressionAssignment_2.eContents().get(0);
		private final RuleCall cSecondExpressionNameExprParserRuleCall_2_0_0 = (RuleCall)cSecondExpressionAlternatives_2_0.eContents().get(0);
		private final RuleCall cSecondExpressionNumeralParserRuleCall_2_0_1 = (RuleCall)cSecondExpressionAlternatives_2_0.eContents().get(1);
		private final RuleCall cSecondExpressionBracketedExpressionParserRuleCall_2_0_2 = (RuleCall)cSecondExpressionAlternatives_2_0.eContents().get(2);
		
		//InfixApplication: //firstExpression=[Expression] identifier=IDENTIFIERS secondExpression=[Expression]
		//
		////firstExpression=(NameExpr) identifier=IDENTIFIERS secondExpression=(NameExpr | Numeral | BracketedExpression)
		//
		//	firstExpression=NameExpr "=" secondExpression=(NameExpr | Numeral | BracketedExpression);
		public ParserRule getRule() { return rule; }

		////firstExpression=[Expression] identifier=IDENTIFIERS secondExpression=[Expression]
		//
		////firstExpression=(NameExpr) identifier=IDENTIFIERS secondExpression=(NameExpr | Numeral | BracketedExpression)
		//
		//firstExpression=NameExpr "=" secondExpression=(NameExpr | Numeral | BracketedExpression)
		public Group getGroup() { return cGroup; }

		////firstExpression=[Expression] identifier=IDENTIFIERS secondExpression=[Expression]
		//
		////firstExpression=(NameExpr) identifier=IDENTIFIERS secondExpression=(NameExpr | Numeral | BracketedExpression)
		//
		//firstExpression=NameExpr
		public Assignment getFirstExpressionAssignment_0() { return cFirstExpressionAssignment_0; }

		//NameExpr
		public RuleCall getFirstExpressionNameExprParserRuleCall_0_0() { return cFirstExpressionNameExprParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//secondExpression=(NameExpr | Numeral | BracketedExpression)
		public Assignment getSecondExpressionAssignment_2() { return cSecondExpressionAssignment_2; }

		//NameExpr | Numeral | BracketedExpression
		public Alternatives getSecondExpressionAlternatives_2_0() { return cSecondExpressionAlternatives_2_0; }

		//NameExpr
		public RuleCall getSecondExpressionNameExprParserRuleCall_2_0_0() { return cSecondExpressionNameExprParserRuleCall_2_0_0; }

		//Numeral
		public RuleCall getSecondExpressionNumeralParserRuleCall_2_0_1() { return cSecondExpressionNumeralParserRuleCall_2_0_1; }

		//BracketedExpression
		public RuleCall getSecondExpressionBracketedExpressionParserRuleCall_2_0_2() { return cSecondExpressionBracketedExpressionParserRuleCall_2_0_2; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdentifierIDENTIFIERSTerminalRuleCall_0 = (RuleCall)cIdentifierAssignment.eContents().get(0);
		
		////Basic datatypes
		//
		//Name:
		//
		//	identifier=IDENTIFIERS;
		public ParserRule getRule() { return rule; }

		//identifier=IDENTIFIERS
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//IDENTIFIERS
		public RuleCall getIdentifierIDENTIFIERSTerminalRuleCall_0() { return cIdentifierIDENTIFIERSTerminalRuleCall_0; }
	}

	public class NumeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Numeral");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberNUMERALSTerminalRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		////This one need whitespace between character... So substitute with terminal
		//
		////Identifier:
		//
		////	firstChar=LETTER (nextChar+=(LETTER | DIGIT | '?' | '_'))*
		//
		////	| (opchar+=OPCHAR)+
		//
		////;
		//
		////This one need whitespace between character... So substitute with terminal
		//
		////But the terminal will be the same with terminal INT... so use INT instead...
		//
		//Numeral: //(digit+=DIGIT)*
		//
		////number=INT
		//
		//	number=NUMERALS;
		public ParserRule getRule() { return rule; }

		////(digit+=DIGIT)*
		//
		////number=INT
		//
		//number=NUMERALS
		public Assignment getNumberAssignment() { return cNumberAssignment; }

		//NUMERALS
		public RuleCall getNumberNUMERALSTerminalRuleCall_0() { return cNumberNUMERALSTerminalRuleCall_0; }
	}
	
	
	private ContextElements pContext;
	private ContextBodyElements pContextBody;
	private DeclarationsElements pDeclarations;
	private DeclarationElements pDeclaration;
	private TypeDeclarationElements pTypeDeclaration;
	private TypeDefElements pTypeDef;
	private TypeElements pType;
	private BasicTypeElements pBasicType;
	private QualifiedNameElements pQualifiedName;
	private ActualParametersElements pActualParameters;
	private SubrangeElements pSubrange;
	private BoundElements pBound;
	private ScalarTypeElements pScalarType;
	private ModuleDeclarationElements pModuleDeclaration;
	private ModuleElements pModule;
	private BaseModuleElements pBaseModule;
	private BaseDeclarationsElements pBaseDeclarations;
	private BaseDeclarationElements pBaseDeclaration;
	private InputDeclElements pInputDecl;
	private OutputDeclElements pOutputDecl;
	private LocalDeclElements pLocalDecl;
	private DefDeclElements pDefDecl;
	private InitDeclElements pInitDecl;
	private TransDeclElements pTransDecl;
	private VarDeclsElements pVarDecls;
	private VarDeclElements pVarDecl;
	private DefinitionsElements pDefinitions;
	private DefinitionOrCommandElements pDefinitionOrCommand;
	private DefinitionElements pDefinition;
	private SimpleDefinitionElements pSimpleDefinition;
	private LhsElements pLhs;
	private RhsDefinitionElements pRhsDefinition;
	private RhsExpressionElements pRhsExpression;
	private SomeCommandsElements pSomeCommands;
	private SomeCommandElements pSomeCommand;
	private NamedCommandElements pNamedCommand;
	private GuardedCommandElements pGuardedCommand;
	private GuardElements pGuard;
	private AssignmentsElements pAssignments;
	private ElseCommandElements pElseCommand;
	private ExpressionElements pExpression;
	private BracketedExpressionElements pBracketedExpression;
	private OuterInfixApplicationElements pOuterInfixApplication;
	private NameExprElements pNameExpr;
	private NextVariableElements pNextVariable;
	private ApplicationElements pApplication;
	private FunctionElements pFunction;
	private ArgumentElements pArgument;
	private InfixApplicationElements pInfixApplication;
	private NameElements pName;
	private NumeralElements pNumeral;
	private TerminalRule tIDENTIFIERS;
	private TerminalRule tNUMERALS;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SalGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.be.textbe.bt2sal2.xtext.sal.Sal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Context:
	//
	//	identifier=IDENTIFIERS ": CONTEXT =" contextBody=ContextBody;
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//ContextBody:
	//
	//	"BEGIN" declarations=Declarations "END";
	public ContextBodyElements getContextBodyAccess() {
		return (pContextBody != null) ? pContextBody : (pContextBody = new ContextBodyElements());
	}
	
	public ParserRule getContextBodyRule() {
		return getContextBodyAccess().getRule();
	}

	//Declarations:
	//
	//	(declaration+=Declaration ";")+;
	public DeclarationsElements getDeclarationsAccess() {
		return (pDeclarations != null) ? pDeclarations : (pDeclarations = new DeclarationsElements());
	}
	
	public ParserRule getDeclarationsRule() {
		return getDeclarationsAccess().getRule();
	}

	//Declaration:
	//
	//	TypeDeclaration | ModuleDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	////Type
	//
	//TypeDeclaration:
	//
	//	identifier=IDENTIFIERS ": TYPE" ("=" typeDef=TypeDef)?;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return (pTypeDeclaration != null) ? pTypeDeclaration : (pTypeDeclaration = new TypeDeclarationElements());
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//TypeDef:
	//
	//	Type | ScalarType;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//Type: //{Type} 
	//
	//	BasicType | Name | QualifiedName | Subrange;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//BasicType:
	//
	//	type="BOOLEAN";
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//QualifiedName:
	//
	//	identifier1=IDENTIFIERS "{" actualParameters=ActualParameters? "}" "!" identifier2=IDENTIFIERS;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ActualParameters: //Something else
	//
	//	Type;
	public ActualParametersElements getActualParametersAccess() {
		return (pActualParameters != null) ? pActualParameters : (pActualParameters = new ActualParametersElements());
	}
	
	public ParserRule getActualParametersRule() {
		return getActualParametersAccess().getRule();
	}

	//Subrange:
	//
	//	"[" lowerBound=Bound ".." upperBound=Bound "]";
	public SubrangeElements getSubrangeAccess() {
		return (pSubrange != null) ? pSubrange : (pSubrange = new SubrangeElements());
	}
	
	public ParserRule getSubrangeRule() {
		return getSubrangeAccess().getRule();
	}

	//Bound:
	//
	//	Expression;
	public BoundElements getBoundAccess() {
		return (pBound != null) ? pBound : (pBound = new BoundElements());
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}

	//ScalarType:
	//
	//	"{" firstType=IDENTIFIERS ("," nextType+=IDENTIFIERS)* "}";
	public ScalarTypeElements getScalarTypeAccess() {
		return (pScalarType != null) ? pScalarType : (pScalarType = new ScalarTypeElements());
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}

	////Module
	//
	//ModuleDeclaration:
	//
	//	identifier=IDENTIFIERS ": MODULE =" module=Module;
	public ModuleDeclarationElements getModuleDeclarationAccess() {
		return (pModuleDeclaration != null) ? pModuleDeclaration : (pModuleDeclaration = new ModuleDeclarationElements());
	}
	
	public ParserRule getModuleDeclarationRule() {
		return getModuleDeclarationAccess().getRule();
	}

	//Module:
	//
	//	BaseModule;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//BaseModule:
	//
	//	"BEGIN" BaseDeclarations "END";
	public BaseModuleElements getBaseModuleAccess() {
		return (pBaseModule != null) ? pBaseModule : (pBaseModule = new BaseModuleElements());
	}
	
	public ParserRule getBaseModuleRule() {
		return getBaseModuleAccess().getRule();
	}

	//BaseDeclarations:
	//
	//	baseDeclaration+=BaseDeclaration*;
	public BaseDeclarationsElements getBaseDeclarationsAccess() {
		return (pBaseDeclarations != null) ? pBaseDeclarations : (pBaseDeclarations = new BaseDeclarationsElements());
	}
	
	public ParserRule getBaseDeclarationsRule() {
		return getBaseDeclarationsAccess().getRule();
	}

	//BaseDeclaration:
	//
	//	InputDecl | OutputDecl | LocalDecl | DefDecl | InitDecl | TransDecl;
	public BaseDeclarationElements getBaseDeclarationAccess() {
		return (pBaseDeclaration != null) ? pBaseDeclaration : (pBaseDeclaration = new BaseDeclarationElements());
	}
	
	public ParserRule getBaseDeclarationRule() {
		return getBaseDeclarationAccess().getRule();
	}

	////Declaration Blocks
	//
	//InputDecl:
	//
	//	"INPUT" varDecls=VarDecls;
	public InputDeclElements getInputDeclAccess() {
		return (pInputDecl != null) ? pInputDecl : (pInputDecl = new InputDeclElements());
	}
	
	public ParserRule getInputDeclRule() {
		return getInputDeclAccess().getRule();
	}

	//OutputDecl:
	//
	//	"OUTPUT" varDecls=VarDecls;
	public OutputDeclElements getOutputDeclAccess() {
		return (pOutputDecl != null) ? pOutputDecl : (pOutputDecl = new OutputDeclElements());
	}
	
	public ParserRule getOutputDeclRule() {
		return getOutputDeclAccess().getRule();
	}

	//LocalDecl:
	//
	//	"LOCAL" varDecls=VarDecls;
	public LocalDeclElements getLocalDeclAccess() {
		return (pLocalDecl != null) ? pLocalDecl : (pLocalDecl = new LocalDeclElements());
	}
	
	public ParserRule getLocalDeclRule() {
		return getLocalDeclAccess().getRule();
	}

	//DefDecl:
	//
	//	"DEFINITION" definitions=Definitions;
	public DefDeclElements getDefDeclAccess() {
		return (pDefDecl != null) ? pDefDecl : (pDefDecl = new DefDeclElements());
	}
	
	public ParserRule getDefDeclRule() {
		return getDefDeclAccess().getRule();
	}

	//InitDecl:
	//
	//	"INITIALIZATION" firstDefinitionOrCommand=DefinitionOrCommand (";" nextDefinitionOrCommand+=DefinitionOrCommand)*
	//
	//	";"?;
	public InitDeclElements getInitDeclAccess() {
		return (pInitDecl != null) ? pInitDecl : (pInitDecl = new InitDeclElements());
	}
	
	public ParserRule getInitDeclRule() {
		return getInitDeclAccess().getRule();
	}

	//TransDecl:
	//
	//	"TRANSITION" firstDefinitionOrCommand=DefinitionOrCommand (";" nextDefinitionOrCommand+=DefinitionOrCommand)* ";"?;
	public TransDeclElements getTransDeclAccess() {
		return (pTransDecl != null) ? pTransDecl : (pTransDecl = new TransDeclElements());
	}
	
	public ParserRule getTransDeclRule() {
		return getTransDeclAccess().getRule();
	}

	////Declaration
	//
	//VarDecls:
	//
	//	firstVarDecl=VarDecl ("," nextVarDecl+=VarDecl)*;
	public VarDeclsElements getVarDeclsAccess() {
		return (pVarDecls != null) ? pVarDecls : (pVarDecls = new VarDeclsElements());
	}
	
	public ParserRule getVarDeclsRule() {
		return getVarDeclsAccess().getRule();
	}

	//VarDecl:
	//
	//	firstVar=IDENTIFIERS ("," nextVar+=IDENTIFIERS)* ": " type=Type;
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//Definitions:
	//
	//	firstDefinition=Definition (";" nextDefinition+=Definition)*;
	public DefinitionsElements getDefinitionsAccess() {
		return (pDefinitions != null) ? pDefinitions : (pDefinitions = new DefinitionsElements());
	}
	
	public ParserRule getDefinitionsRule() {
		return getDefinitionsAccess().getRule();
	}

	//DefinitionOrCommand:
	//
	//	Definition | "[" SomeCommands "]";
	public DefinitionOrCommandElements getDefinitionOrCommandAccess() {
		return (pDefinitionOrCommand != null) ? pDefinitionOrCommand : (pDefinitionOrCommand = new DefinitionOrCommandElements());
	}
	
	public ParserRule getDefinitionOrCommandRule() {
		return getDefinitionOrCommandAccess().getRule();
	}

	//Definition:
	//
	//	SimpleDefinition;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//SimpleDefinition:
	//
	//	lhs=Lhs RhsDefinition=RhsDefinition;
	public SimpleDefinitionElements getSimpleDefinitionAccess() {
		return (pSimpleDefinition != null) ? pSimpleDefinition : (pSimpleDefinition = new SimpleDefinitionElements());
	}
	
	public ParserRule getSimpleDefinitionRule() {
		return getSimpleDefinitionAccess().getRule();
	}

	//Lhs:
	//
	//	identifier=IDENTIFIERS "\'"?;
	public LhsElements getLhsAccess() {
		return (pLhs != null) ? pLhs : (pLhs = new LhsElements());
	}
	
	public ParserRule getLhsRule() {
		return getLhsAccess().getRule();
	}

	//RhsDefinition:
	//
	//	RhsExpression;
	public RhsDefinitionElements getRhsDefinitionAccess() {
		return (pRhsDefinition != null) ? pRhsDefinition : (pRhsDefinition = new RhsDefinitionElements());
	}
	
	public ParserRule getRhsDefinitionRule() {
		return getRhsDefinitionAccess().getRule();
	}

	//RhsExpression:
	//
	//	"=" expression=Expression;
	public RhsExpressionElements getRhsExpressionAccess() {
		return (pRhsExpression != null) ? pRhsExpression : (pRhsExpression = new RhsExpressionElements());
	}
	
	public ParserRule getRhsExpressionRule() {
		return getRhsExpressionAccess().getRule();
	}

	//SomeCommands:
	//
	//	firstSomeCommand=SomeCommand ("[]" nextSomeCommand+=SomeCommand)* ("[]" elseCommand=ElseCommand)?;
	public SomeCommandsElements getSomeCommandsAccess() {
		return (pSomeCommands != null) ? pSomeCommands : (pSomeCommands = new SomeCommandsElements());
	}
	
	public ParserRule getSomeCommandsRule() {
		return getSomeCommandsAccess().getRule();
	}

	//SomeCommand:
	//
	//	NamedCommand;
	public SomeCommandElements getSomeCommandAccess() {
		return (pSomeCommand != null) ? pSomeCommand : (pSomeCommand = new SomeCommandElements());
	}
	
	public ParserRule getSomeCommandRule() {
		return getSomeCommandAccess().getRule();
	}

	//NamedCommand:
	//
	//	(identifier=IDENTIFIERS ": ")? guardedCommand=GuardedCommand;
	public NamedCommandElements getNamedCommandAccess() {
		return (pNamedCommand != null) ? pNamedCommand : (pNamedCommand = new NamedCommandElements());
	}
	
	public ParserRule getNamedCommandRule() {
		return getNamedCommandAccess().getRule();
	}

	//GuardedCommand:
	//
	//	guard=Guard "-->" assignment=Assignments;
	public GuardedCommandElements getGuardedCommandAccess() {
		return (pGuardedCommand != null) ? pGuardedCommand : (pGuardedCommand = new GuardedCommandElements());
	}
	
	public ParserRule getGuardedCommandRule() {
		return getGuardedCommandAccess().getRule();
	}

	//Guard:
	//
	//	Expression;
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Assignments:
	//
	//	firstSimpleDefinition=SimpleDefinition? (";" nextSimpleDefinition+=SimpleDefinition)* ";"?;
	public AssignmentsElements getAssignmentsAccess() {
		return (pAssignments != null) ? pAssignments : (pAssignments = new AssignmentsElements());
	}
	
	public ParserRule getAssignmentsRule() {
		return getAssignmentsAccess().getRule();
	}

	//ElseCommand:
	//
	//	(identifier=IDENTIFIERS ":")? "ELSE -->" assignments=Assignments;
	public ElseCommandElements getElseCommandAccess() {
		return (pElseCommand != null) ? pElseCommand : (pElseCommand = new ElseCommandElements());
	}
	
	public ParserRule getElseCommandRule() {
		return getElseCommandAccess().getRule();
	}

	////Expression
	//
	////This rule is reconstructed because Xtext does not support recursive rule
	//
	////Expression:
	//
	////	NameExpr | NextVariable | Numeral | Application | 
	//
	////	InfixApplication | "(" Expression ")"
	//
	////;
	//
	//Expression:
	//
	//	NameExpr //| Application | InfixApplication 
	//
	//	//| "(" Expression ")"
	//
	//	| NextVariable | Numeral | OuterInfixApplication | BracketedExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//BracketedExpression:
	//
	//	"(" expression=Expression ")";
	public BracketedExpressionElements getBracketedExpressionAccess() {
		return (pBracketedExpression != null) ? pBracketedExpression : (pBracketedExpression = new BracketedExpressionElements());
	}
	
	public ParserRule getBracketedExpressionRule() {
		return getBracketedExpressionAccess().getRule();
	}

	//OuterInfixApplication:
	//
	//	firstExpression=(Application | InfixApplication) (IDENTIFIERS nextExpression+=(Application | InfixApplication))*;
	public OuterInfixApplicationElements getOuterInfixApplicationAccess() {
		return (pOuterInfixApplication != null) ? pOuterInfixApplication : (pOuterInfixApplication = new OuterInfixApplicationElements());
	}
	
	public ParserRule getOuterInfixApplicationRule() {
		return getOuterInfixApplicationAccess().getRule();
	}

	//NameExpr:
	//
	//	Name;
	public NameExprElements getNameExprAccess() {
		return (pNameExpr != null) ? pNameExpr : (pNameExpr = new NameExprElements());
	}
	
	public ParserRule getNameExprRule() {
		return getNameExprAccess().getRule();
	}

	//NextVariable:
	//
	//	identifier=IDENTIFIERS ".";
	public NextVariableElements getNextVariableAccess() {
		return (pNextVariable != null) ? pNextVariable : (pNextVariable = new NextVariableElements());
	}
	
	public ParserRule getNextVariableRule() {
		return getNextVariableAccess().getRule();
	}

	//Application:
	//
	//	function=Function argument=Argument;
	public ApplicationElements getApplicationAccess() {
		return (pApplication != null) ? pApplication : (pApplication = new ApplicationElements());
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}

	//Function: //expression=[Expression]
	//
	//	expression=NameExpr;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Argument: //firstExpression=[Expression] ("," nextExpression+=[Expression])*
	//
	//	firstExpression=(NameExpr | BracketedExpression) ("," nextExpression+=(NameExpr | BracketedExpression))*;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//InfixApplication: //firstExpression=[Expression] identifier=IDENTIFIERS secondExpression=[Expression]
	//
	////firstExpression=(NameExpr) identifier=IDENTIFIERS secondExpression=(NameExpr | Numeral | BracketedExpression)
	//
	//	firstExpression=NameExpr "=" secondExpression=(NameExpr | Numeral | BracketedExpression);
	public InfixApplicationElements getInfixApplicationAccess() {
		return (pInfixApplication != null) ? pInfixApplication : (pInfixApplication = new InfixApplicationElements());
	}
	
	public ParserRule getInfixApplicationRule() {
		return getInfixApplicationAccess().getRule();
	}

	////Basic datatypes
	//
	//Name:
	//
	//	identifier=IDENTIFIERS;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	////This one need whitespace between character... So substitute with terminal
	//
	////Identifier:
	//
	////	firstChar=LETTER (nextChar+=(LETTER | DIGIT | '?' | '_'))*
	//
	////	| (opchar+=OPCHAR)+
	//
	////;
	//
	////This one need whitespace between character... So substitute with terminal
	//
	////But the terminal will be the same with terminal INT... so use INT instead...
	//
	//Numeral: //(digit+=DIGIT)*
	//
	////number=INT
	//
	//	number=NUMERALS;
	public NumeralElements getNumeralAccess() {
		return (pNumeral != null) ? pNumeral : (pNumeral = new NumeralElements());
	}
	
	public ParserRule getNumeralRule() {
		return getNumeralAccess().getRule();
	}

	////Terminals
	//
	//terminal IDENTIFIERS:
	//
	//	("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "?" | "_")* | ("+" | "-" | "*" | "/" | "=")+;
	public TerminalRule getIDENTIFIERSRule() {
		return (tIDENTIFIERS != null) ? tIDENTIFIERS : (tIDENTIFIERS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIERS"));
	} 

	//terminal NUMERALS:
	//
	//	"0".."9"+;
	public TerminalRule getNUMERALSRule() {
		return (tNUMERALS != null) ? tNUMERALS : (tNUMERALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERALS"));
	} 

	////Now we have terminal IDENTIFIER that comprise all these terminal below..
	//
	////terminal OPCHAR:
	//
	////	( '+' | '-' | '*' | '/' | '=' )
	//
	////;
	//
	////terminal SPECIALSYMBOL:
	//
	////	( '(' | ')' | '[' | ']' | '{' | '}' | '%' | ',' | '.' | ';' | ':' | "'" | '!' | '#' | '?' | '_' )
	//
	////;
	//
	////terminal LETTER:
	//
	////	('a'..'z'|'A'..'Z')
	//
	////;
	//
	////terminal DIGIT:
	//
	////	('0'..'9')
	//
	////;
	//
	////terminal ID  		: ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'('|')')*;
	//
	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
