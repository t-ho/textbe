#RT R1 R1 R2 R2 R3 R3 R4 R4 R5 R5 R6 R6 R7 R7 R8 R8 R9 R9

#SC C2 ATP_SYSTEM
#S 1 Located #R Where on C3
#S 2 Operating
#EI 3 Reset

#C C3 TRAIN
#EI 1 Approaches #R What C11   
#S 2 Speed[Decreasing]
#IO 3 ApproachSignal
#II 4 ApproachSignal

#C C4 ATP_CONTROLLER 
#II 3 Sensor(value)
#L 4 value=2 
#A 5 NoActionTaken #R What wrt C8 / #R / What of C3
#L 6 value=1 
#L 7 NOT(Observed) #R What C3 2
#S 8 Activate #R What C8 / #R / What of C3
#L 9 value=0 
#S 10 Activate[Immediately] #R What C8 / #R / What of C3
#L 11 value=2 
#L 12 NOT(value=2) #R What C12 2
#A 13 Ignore #R What C6 3
#S 14 Reset
#A 15 Accept #R What C6 3
#L 16 value=3
#L 17 Observed #R What C3 2
#L 18 ELSE

#C C5 BOUNDARY_SUBSYSTEM5
#S 1 Manage #R What C6 #R What C7 #R What C8 #R What C9 #R What C10
 
#C C6 SENSOR3
#S 1 Attached #R What to C15 / #R / What of C3
#S 2 value:=3 #R What C12 3
#IO 3 Sensor(value)
#IO 4 Sensor(value) #R What of C17 5 
#S 5 Calculate #R What C17 #R / What of || C14 : C6 10
#EI 6 Detect(value1)
#EI 7 Detect(value2)
#EI 8 Detect(value3)
#S 9 Detect_Signal
#S 10 Calculate_Majority(value1,value2,value3)
#S 11 Calculate #R What C17 #R / What of C6

#C C7 SPEEDOMETER

#C C8 BRAKES
#S 1 Activated 2 Deactivated

#C C9 ALARM
#S 1 Enabled #R Where within C18 / #R / Who of C13
#S 3 Enabled 
#S 2 Disabled

#C C10 RESET_MECHANISM  
#EI 1 Reset #R What C4  
#S 2 Enabled
#S 3 Disable #R What C9
#S 4 Deactivate #R What C8 / #R / What of C3
#S 5 Disabled
#IO 6 Reset
#II 7 Reset

#C C11 SIGNAL# 
#S 1 Display #R What C12 #R Who to C13
#IO 2 Detect #R What C12 0
#IO 3 Detect #R What C12 1
#IO 4 Detect #R What C12 2
#IO 5 Detect #R What C12 3 
 
#C C12 INFORMATION
#S 0 Danger 1 Caution 2 Proceed 3 Undefined
 
#C C13 DRIVER

#C C14 SENSOR# 
#S 1 Detect #R What C12 / #R / What that C11 // 1 #R // Who to C13
#II 2 Detect #R What C12 0
#II 3 Detect #R What C12 1
#II 4 Detect #R What C12 2
#S 5 Detect #R What C12 3
#S 6 value:=0
#S 7 value:=1
#S 8 value:=2
#S 9 value:=3
#S 10 SENSOR#.value 
#II 11 Detect #R What C12

#C C15 SIDE  

#C C16 NOISE
#S 1 Exist #R Where between C11 #R Where between C14

#C C17 MAJORITY
#L 1 |MAJORITY|>=2  
#L 2 ELSE
#S 3 Exist 
#S 4 NOT(Exist)
#S 5 MAJORITY.value

#C C18 CAB

#C C19 SPEEDOMETER
#EI 1 newSpeedValue
#S 2 prevSpeed:=speed
#EI 3 getSpeed(value)
#L 4 prevSpeed<=speed
#L 5 prevSpeed>speed
#G 6 prevSpeed<=speed

#T -- C8 2;; -- C9 2;; -- C10 5; R1 -- C2 1; R1 -- C5 1; R2 + C2 2 #P{
	R2 -- C3 1; -- C3 3; -- C3 1 ^ 
 	-- C3 4; R2 -- C11 1 #N{
 		R3 -- C11 2; -- C3 4 ^
 		R3 -- C11 3; -- C3 4 ^
 		R3 -- C11 4; -- C3 4 ^
 	}
 	R2 -- C6 1; R2 R3 +- C6 9 #N{
		R3 -- C14 2; R3 -- C14 6; R4 -- C6 5 =>
		R3 -- C14 3; R3 -- C14 7; R4 -- C6 5 
		R3 -- C14 4; R3 -- C14 8; R4 -- C6 5 =>
		R3 -- C14 5 #P{
			R3 -- C14 9; R4 -- C6 5 =>
			R3 -- C16 1 %
		}
		+- C6 6; +- C6 7; +- C6 8; R4 +- C6 11 #N {
			R4 + C17 1; R4 + C17 3; R4 + C6 4; +- C6 9 ^  
			R4 + C17 2; R4 C17 4; R4 + C6 2; R4 R5 R6 R7 + C6 3; +- C6 9 ^
		}
	}
	R4 C4 3 init #N{
		R5 +- C4 4; R5 -- C4 5; +- C4 3 ^
		R6 +- C4 6; R6 +- C9 3 #P{
			R6 +- C19 4; R6 R8 -- C4 8; R8 C8 1; R8 -- C4 13; +- C2 3 =>
			+- C19 5 #P{
				+- C19 6; - C4 3 --; +- C8 1 => 
				- C4 3 #N{
					- C4 4; -- C4 5; - C9 2; +- C4 3 init.^
					- C4 9; +- C19 6 --; +- C8 1 => 
					- C4 18; - C4 3 ^
				}
			}
		}
		R7 +- C4 9; R7 -- C4 10; R7 R8 + C8 1; R7 + C9 3 #P{
			R7 -- C4 3 #P{
				R7 -- C4 11; R7 -- C9 2; -- C2 2 ^ 
				R7 -- C4 12; R7 -- C4 3 ^
			}
			R8 -- C4 13; +- C2 3; R9 + C8 2; R9 + C9 2; R8 + C4 14; R8 -- C4 15; +- C4 3 ^
		}
		+- C4 16; +- C4 3 ^ 
	}		
	R8 -- C10 1; R9 -- C10 2; R9 -- C10 4; R9 -- C10 3; -- C10 6; -- C10 5; -- C10 1 ^
	+- C19 1;; +- C19 2;; +- C19 3; +- C19 1 ^
}    